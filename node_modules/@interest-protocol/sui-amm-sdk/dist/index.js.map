{"version":3,"sources":["../src/index.ts","../src/constants/index.ts","../src/constants/coins.ts","../src/constants/pools.ts","../src/sdk/index.ts","../src/utils.ts"],"sourcesContent":["export * from './constants';\nexport * from './constants/coins';\nexport * from './constants/pools';\nexport * from './sdk';\nexport * from './types';\nexport * from './utils';\n","export enum Network {\n  DEVNET = 'sui:devnet',\n  TESTNET = 'sui:testnet',\n  MAINNET = 'sui:mainnet',\n}\n\nexport const ZERO_ADDRESS =\n  '0x0000000000000000000000000000000000000000000000000000000000000000';\n\nexport const OBJECT_RECORD = {\n  [Network.DEVNET]: {\n    IPX_PACKAGE_ID:\n      '0x7526f2ab7890276a8bdf4c3167683e2df079781fc3c3a6e1e0bdb95722014954',\n    IPX_STORAGE:\n      '0xa12806b9e0e9084e9fff6f91801a5d8fdc89429430eea5b144e5cc17cc460f77',\n    DEX_PACKAGE_ID:\n      '0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7',\n    DEX_POOLS:\n      '0x0f4d2db07a149879904bb6f745c3dbfe2b3ef5c496ee86f7d66f591f93efbf56',\n    DEX_CORE_STORAGE:\n      '0x92cd50d2735086963fa9c3dc0e7c7c3a294403fbc7d907066e0e1b0420031f46',\n    DEX_MASTER_CHEF_STORAGE:\n      '0x1c216dae931af6595ff8310364aa608a9f8156f875c918fb4945f8a2b7fa3463',\n    DEX_MASTER_CHEF_ACCOUNT_STORAGE:\n      '0x16bc6513fec89419eb1a35ab07a80eb50ccf5985edc096a3a82afb49e0c13e25',\n    FAUCET_PACKAGE_ID:\n      '0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47',\n    FAUCET_BTC_STORAGE:\n      '0xa485bbfe47077f1739970f8cd51af5485d108888f8b66d57e3c33ed679080a7c',\n    FAUCET_ETH_STORAGE:\n      '0x5e6e1dc724b631971a93825e6115cafd91bfcc4bd7bf6cfaff73c812656bb638',\n    FAUCET_BNB_STORAGE:\n      '0x7eed788550fd3edc957298a337eaf4b26ccbf3a977b2ff15781ef8dc72d7eb12',\n    FAUCET_USDC_STORAGE:\n      '0xb77710e571f53eb4dfa1fe5fb365505ecd560a484f57e6a8a55b1c4a84c9d3c4',\n    FAUCET_USDT_STORAGE:\n      '0xd4133d334c351611a05428b4b9b56a18abc67492dc5b7d5feae4a8ea6cf36d89',\n    DEX_QUOTE_PACKAGE_ID:\n      '0xfe3d9d1fbc06b915e9a546b9d38a3e622850fe77cb198f3d8f822f919365a8b9',\n  },\n  [Network.TESTNET]: {\n    IPX_PACKAGE_ID:\n      '0x57e5622e674c7fd98303516920ac4250a0667e486e3617f71c8b448f1b032aed',\n    IPX_STORAGE:\n      '0x4aebcc39ce03cab35c2ef3635aa68d99320f69febe0596e7d61695313f2190d6',\n    DEX_PACKAGE_ID:\n      '0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75',\n    DEX_POOLS:\n      '0x4637ab864aaee41bfa12f0ebf5588d1e91a753f43fe46303f6d93f57d151bd05',\n    DEX_CORE_STORAGE:\n      '0x065a58d3e0e41717c7d0b08d09928b2251d3f8f8b0d1479f092e15635969b8be',\n    DEX_MASTER_CHEF_STORAGE:\n      '0xefc82c6a4d8b6d1b2e6421fa7640e0befb14c8f7e862360b948cbff0fbd5fba3',\n    DEX_MASTER_CHEF_ACCOUNT_STORAGE:\n      '0xdf5cef4c924f0cbd874ff12a2a7aa32673c9f80722fd781cc66fab11bdf155eb',\n    FAUCET_PACKAGE_ID:\n      '0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0',\n    FAUCET_BTC_STORAGE:\n      '0xdec9b16bb03b140e3102042ad502e1debbe7d91fd347e0110d7ed72d269da0ae',\n    FAUCET_ETH_STORAGE:\n      '0x42ff0f1c48ed73b238e32d29552157f7d4961c52ca5175ceeef6301425d8dcf8',\n    FAUCET_BNB_STORAGE:\n      '0x15b454ee4546ddb49ef42e67167f71fac8406961a51dc28529e235669a7d136c',\n    FAUCET_USDC_STORAGE:\n      '0xa08c1f969d36beba75637f771f89943856f69cef8be540a867e80ec6047ded1e',\n    FAUCET_USDT_STORAGE:\n      '0xf80e06b35dad3ba0094db29ae89488b81a68e1e9746fad5c98c3dc67c4a0827c',\n    DEX_QUOTE_PACKAGE_ID:\n      '0xfe3d9d1fbc06b915e9a546b9d38a3e622850fe77cb198f3d8f822f919365a8b9',\n  },\n  [Network.MAINNET]: {\n    IPX_PACKAGE_ID:\n      '0x49d87b9af35c4fef28def2cd65884aa9c49bb4eedbcee647f4dafb5c8f36ba57',\n    IPX_STORAGE:\n      '0xd3c1e174400409c2613559f0309d82fb2a97a1bbc77d6ea39aa1e11f4f6d67d1',\n    DEX_PACKAGE_ID:\n      '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0',\n    DEX_POOLS:\n      '0x108779144605a44e4b5447118b711f0b17adf6168cc9b08551d33daca58098e3',\n    DEX_CORE_STORAGE:\n      '0xdf2ee39f28fdf4bc5d5b5dc89926ac121839f8594fa51b2383a14cb99ab25a77',\n    DEX_MASTER_CHEF_STORAGE:\n      '0xbf3574ae177272809a7ee8f16c68db8fb832d4b10cb5febc477f90baba5ab6dd',\n    DEX_MASTER_CHEF_ACCOUNT_STORAGE:\n      '0x23fd9726a20709b6f3a59ba676a1d7bfede607ebeb011f888bb33de4f8f44e32',\n    // THERE IS NO FAUCET ON MAINNET\n    FAUCET_PACKAGE_ID:\n      '0x0000000000000000000000000000000000000000000000000000000000000000',\n    FAUCET_BTC_STORAGE:\n      '0x0000000000000000000000000000000000000000000000000000000000000000',\n    FAUCET_ETH_STORAGE:\n      '0x0000000000000000000000000000000000000000000000000000000000000000',\n    FAUCET_BNB_STORAGE:\n      '0x0000000000000000000000000000000000000000000000000000000000000000',\n    FAUCET_USDC_STORAGE:\n      '0x0000000000000000000000000000000000000000000000000000000000000000',\n    FAUCET_USDT_STORAGE:\n      '0x0000000000000000000000000000000000000000000000000000000000000000',\n    DEX_QUOTE_PACKAGE_ID:\n      '0xd3f17406b17aa93f634e486a76938532e49f04345e59c3d250c9ebce79a0263f',\n  },\n};\n\nexport enum DexFunctions {\n  SwapX = 'swap_x',\n  SwapY = 'swap_y',\n  OneHopSwap = 'one_hop_swap',\n  TwoHopSwap = 'two_hop_swap',\n}\n\nexport const DEX_FUNCTION_TO_GET_AMOUNT_FUNCTION_MAP = {\n  [DexFunctions.SwapX]: 'quote_swap_x',\n  [DexFunctions.SwapY]: 'quote_swap_y',\n  [DexFunctions.OneHopSwap]: 'quote_one_hop_swap',\n  [DexFunctions.TwoHopSwap]: 'quote_two_hop_swap',\n};\n\nexport interface Pool {\n  token0Balance: string;\n  token1Balance: string;\n  lpCoinSupply: string;\n  lpCoin: string;\n  poolType: string;\n  stable: boolean;\n  token0Type: string;\n  token1Type: string;\n}\n\nexport const DEFAULT_POOL: Pool = {\n  token0Balance: '0',\n  token1Balance: '0',\n  lpCoinSupply: '0',\n  lpCoin: '',\n  poolType: '',\n  token0Type: '',\n  token1Type: '',\n  stable: false,\n};\n","import { SUI_TYPE_ARG } from '@mysten/sui.js';\n\nimport { Network, OBJECT_RECORD } from './index';\n\nexport const VOLATILE = {\n  [Network.DEVNET]: `${\n    OBJECT_RECORD[Network.DEVNET].DEX_PACKAGE_ID\n  }::curve::Volatile`,\n  [Network.TESTNET]: `${\n    OBJECT_RECORD[Network.TESTNET].DEX_PACKAGE_ID\n  }::curve::Volatile`,\n  [Network.MAINNET]: `${\n    OBJECT_RECORD[Network.MAINNET].DEX_PACKAGE_ID\n  }::curve::Volatile`,\n};\n\nexport const STABLE = {\n  [Network.DEVNET]: `${\n    OBJECT_RECORD[Network.DEVNET].DEX_PACKAGE_ID\n  }::curve::Stable`,\n  [Network.TESTNET]: `${\n    OBJECT_RECORD[Network.TESTNET].DEX_PACKAGE_ID\n  }::curve::Stable`,\n  [Network.MAINNET]: `${\n    OBJECT_RECORD[Network.MAINNET].DEX_PACKAGE_ID\n  }::curve::Stable`,\n};\n\nconst DEV_NET_BASE_COINS = {\n  SUI: SUI_TYPE_ARG,\n  BNB: `${OBJECT_RECORD[Network.DEVNET].FAUCET_PACKAGE_ID}::ibnb::IBNB`,\n  ETH: `${OBJECT_RECORD[Network.DEVNET].FAUCET_PACKAGE_ID}::ieth::IETH`,\n  BTC: `${OBJECT_RECORD[Network.DEVNET].FAUCET_PACKAGE_ID}::ibtc::IBTC`,\n  USDT: `${OBJECT_RECORD[Network.DEVNET].FAUCET_PACKAGE_ID}::iusdt::IUSDT`,\n  USDC: `${OBJECT_RECORD[Network.DEVNET].FAUCET_PACKAGE_ID}::iusdc::IUSDC`,\n  IPX: `${OBJECT_RECORD[Network.DEVNET].IPX_PACKAGE_ID}::ipx::IPX`,\n};\n\nconst TESTNET_NET_BASE_COINS = {\n  SUI: SUI_TYPE_ARG,\n  BNB: `${OBJECT_RECORD[Network.TESTNET].FAUCET_PACKAGE_ID}::ibnb::IBNB`,\n  ETH: `${OBJECT_RECORD[Network.TESTNET].FAUCET_PACKAGE_ID}::ieth::IETH`,\n  BTC: `${OBJECT_RECORD[Network.TESTNET].FAUCET_PACKAGE_ID}::ibtc::IBTC`,\n  USDT: `${OBJECT_RECORD[Network.TESTNET].FAUCET_PACKAGE_ID}::iusdt::IUSDT`,\n  USDC: `${OBJECT_RECORD[Network.TESTNET].FAUCET_PACKAGE_ID}::iusdc::IUSDC`,\n  IPX: `${OBJECT_RECORD[Network.TESTNET].IPX_PACKAGE_ID}::ipx::IPX`,\n};\n\nexport const MAINNET_BASE_COINS = {\n  SUI: SUI_TYPE_ARG,\n  ETH_WORMHOLE_USDC:\n    '0x5d4b302506645c37ff133b98c4b50a5ae14841659738d6d733d59d0d217a93bf::coin::COIN',\n  NATIVE_WORMHOLE_ETH:\n    '0xaf8cd5edc19c4512f4259f0bee101a40d41ebed738ade5874359610ef8eeced5::coin::COIN',\n  ETH_WORMHOLE_USDT:\n    '0xc060006111016b8a020ad5b33834984a437aaa7d3c74c18e09a95d48aceab08c::coin::COIN',\n  NATIVE_WORMHOLE_WBNB:\n    '0xb848cce11ef3a8f62eccea6eb5b35a12c4c2b1ee1af7755d02d7bd6218e8226f::coin::COIN',\n  NATIVE_WORMHOLE_WAVAX:\n    '0x1e8b532cca6569cab9f9b9ebc73f8c13885012ade714729aa3b450e0339ac766::coin::COIN',\n  NATIVE_WORMHOLE_WFTM:\n    '0x6081300950a4f1e2081580e919c210436a1bed49080502834950d31ee55a2396::coin::COIN',\n  NATIVE_WORMHOLE_CELO:\n    '0xa198f3be41cda8c07b3bf3fee02263526e535d682499806979a111e88a5a8d0f::coin::COIN',\n  NATIVE_WORMHOLE_WMATIC:\n    '0xdbe380b13a6d0f5cdedd58de8f04625263f113b3f9db32b3e1983f49e2841676::coin::COIN',\n  NATIVE_WORMHOLE_SOL:\n    '0xb7844e289a8410e50fb3ca48d69eb9cf29e27d223ef90353fe1bd8e27ff8f3f8::coin::COIN',\n  BSC_WORMHOLE_ADA:\n    '0x4eac6573f65e7db5aea5a23e1335993a57e088dcd4aff7934059d9a6311d8655::coin::COIN',\n  BSC_WORMHOLE_BTCB:\n    '0x5cc7b6ed0ce0d43d08667793f6efe7a34d678a780755dc37ea8bfa8805f63327::coin::COIN',\n  BSC_WORMHOLE_USDT:\n    '0x603b488c87e0d1df64560a61418c87238d440a29ee39bbd757b0c92d38a35c7c::coin::COIN',\n  BSC_WORMHOLE_USDC:\n    '0x909cba62ce96d54de25bec9502de5ca7b4f28901747bbf96b76c2e63ec5f1cba::coin::COIN',\n  BSC_WORMHOLE_ETH:\n    '0x5029d5a94429a73b8036cd67192d9c5e09bbc2c0fee942d50075a9edba66744f::coin::COIN',\n  BSC_WORMHOLE_FLOKI:\n    '0xbcbbd5c23edf35fc279e21ebc129a1187dbfa5b086c63a8e7ff202865888b27b::coin::COIN',\n  BSC_WORMHOLE_DOGE:\n    '0xd399b358bd0e835000f6caa8c771a7d186499b6e62d413c2fd6cfed709689f28::coin::COIN',\n};\n\nexport const COIN_TYPE = {\n  [Network.DEVNET]: {\n    ...DEV_NET_BASE_COINS,\n    V_LP_SUI_ETH: `${\n      OBJECT_RECORD[Network.DEVNET].DEX_PACKAGE_ID\n    }::core::LPCoin<${VOLATILE[Network.DEVNET]}, ${DEV_NET_BASE_COINS.SUI}, ${\n      DEV_NET_BASE_COINS.ETH\n    }>`,\n    V_LP_BTC_ETH: `${\n      OBJECT_RECORD[Network.DEVNET].DEX_PACKAGE_ID\n    }::core::LPCoin<${VOLATILE[Network.DEVNET]}, ${DEV_NET_BASE_COINS.BTC}, ${\n      DEV_NET_BASE_COINS.ETH\n    }>`,\n    V_LP_BNB_ETH: `${\n      OBJECT_RECORD[Network.DEVNET].DEX_PACKAGE_ID\n    }::core::LPCoin<${VOLATILE[Network.DEVNET]}, ${DEV_NET_BASE_COINS.BNB}, ${\n      DEV_NET_BASE_COINS.ETH\n    }>`,\n    V_LP_ETH_USDT: `${\n      OBJECT_RECORD[Network.DEVNET].DEX_PACKAGE_ID\n    }::core::LPCoin<${VOLATILE[Network.DEVNET]}, ${DEV_NET_BASE_COINS.ETH}, ${\n      DEV_NET_BASE_COINS.USDT\n    }>`,\n    V_LP_ETH_USDC: `${\n      OBJECT_RECORD[Network.DEVNET].DEX_PACKAGE_ID\n    }::core::LPCoin<${VOLATILE[Network.DEVNET]}, ${DEV_NET_BASE_COINS.ETH}, ${\n      DEV_NET_BASE_COINS.USDC\n    }>`,\n    V_LP_ETH_IPX: `${\n      OBJECT_RECORD[Network.DEVNET].DEX_PACKAGE_ID\n    }::core::LPCoin<${VOLATILE[Network.DEVNET]}, ${DEV_NET_BASE_COINS.ETH}, ${\n      DEV_NET_BASE_COINS.IPX\n    }>`,\n    S_LP_USDC_USDT: `${\n      OBJECT_RECORD[Network.DEVNET].DEX_PACKAGE_ID\n    }::core::LPCoin<${STABLE[Network.DEVNET]}, ${DEV_NET_BASE_COINS.USDC}, ${\n      DEV_NET_BASE_COINS.USDT\n    }>`,\n  },\n  [Network.TESTNET]: {\n    ...TESTNET_NET_BASE_COINS,\n    V_LP_SUI_ETH: `${\n      OBJECT_RECORD[Network.TESTNET].DEX_PACKAGE_ID\n    }::core::LPCoin<${VOLATILE[Network.TESTNET]}, ${\n      TESTNET_NET_BASE_COINS.SUI\n    }, ${TESTNET_NET_BASE_COINS.ETH}>`,\n    V_LP_BTC_ETH: `${\n      OBJECT_RECORD[Network.TESTNET].DEX_PACKAGE_ID\n    }::core::LPCoin<${VOLATILE[Network.TESTNET]}, ${\n      TESTNET_NET_BASE_COINS.BTC\n    }, ${TESTNET_NET_BASE_COINS.ETH}>`,\n    V_LP_BNB_ETH: `${\n      OBJECT_RECORD[Network.TESTNET].DEX_PACKAGE_ID\n    }::core::LPCoin<${VOLATILE[Network.TESTNET]}, ${\n      TESTNET_NET_BASE_COINS.BNB\n    }, ${TESTNET_NET_BASE_COINS.ETH}>`,\n    V_LP_ETH_USDT: `${\n      OBJECT_RECORD[Network.TESTNET].DEX_PACKAGE_ID\n    }::core::LPCoin<${VOLATILE[Network.TESTNET]}, ${\n      TESTNET_NET_BASE_COINS.ETH\n    }, ${TESTNET_NET_BASE_COINS.USDT}>`,\n    V_LP_ETH_USDC: `${\n      OBJECT_RECORD[Network.TESTNET].DEX_PACKAGE_ID\n    }::core::LPCoin<${VOLATILE[Network.TESTNET]}, ${\n      TESTNET_NET_BASE_COINS.ETH\n    }, ${TESTNET_NET_BASE_COINS.USDC}>`,\n    V_LP_ETH_IPX: `${\n      OBJECT_RECORD[Network.TESTNET].DEX_PACKAGE_ID\n    }::core::LPCoin<${VOLATILE[Network.TESTNET]}, ${\n      TESTNET_NET_BASE_COINS.IPX\n    }, ${TESTNET_NET_BASE_COINS.ETH}>`,\n    S_LP_USDC_USDT: `${\n      OBJECT_RECORD[Network.TESTNET].DEX_PACKAGE_ID\n    }::core::LPCoin<${STABLE[Network.TESTNET]}, ${\n      TESTNET_NET_BASE_COINS.USDC\n    }, ${TESTNET_NET_BASE_COINS.USDT}>`,\n  },\n  [Network.MAINNET]: {\n    ...MAINNET_BASE_COINS,\n    S_LP_ETH_WORMHOLE_USDC_ETH_WORMHOLE_USDT: `${\n      OBJECT_RECORD[Network.MAINNET].DEX_PACKAGE_ID\n    }::core::LPCoin<${STABLE[Network.MAINNET]}, ${\n      MAINNET_BASE_COINS.ETH_WORMHOLE_USDC\n    }, ${MAINNET_BASE_COINS.ETH_WORMHOLE_USDT}>`,\n    V_LP_SUI_NATIVE_WORMHOLE_ETH: `${\n      OBJECT_RECORD[Network.MAINNET].DEX_PACKAGE_ID\n    }::core::LPCoin<${VOLATILE[Network.MAINNET]}, ${MAINNET_BASE_COINS.SUI}, ${\n      MAINNET_BASE_COINS.NATIVE_WORMHOLE_ETH\n    }>`,\n    V_LP_SUI_ETH_WORMHOLE_USDT: `${\n      OBJECT_RECORD[Network.MAINNET].DEX_PACKAGE_ID\n    }::core::LPCoin<${VOLATILE[Network.MAINNET]}, ${MAINNET_BASE_COINS.SUI}, ${\n      MAINNET_BASE_COINS.ETH_WORMHOLE_USDT\n    }>`,\n    V_LP_SUI_ETH_WORMHOLE_USDC: `${\n      OBJECT_RECORD[Network.MAINNET].DEX_PACKAGE_ID\n    }::core::LPCoin<${VOLATILE[Network.MAINNET]}, ${MAINNET_BASE_COINS.SUI}, ${\n      MAINNET_BASE_COINS.ETH_WORMHOLE_USDC\n    }>`,\n    V_LP_SUI_NATIVE_WORMHOLE_WBNB: `${\n      OBJECT_RECORD[Network.MAINNET].DEX_PACKAGE_ID\n    }::core::LPCoin<${VOLATILE[Network.MAINNET]}, ${MAINNET_BASE_COINS.SUI}, ${\n      MAINNET_BASE_COINS.NATIVE_WORMHOLE_WBNB\n    }>`,\n    V_LP_SUI_NATIVE_WORMHOLE_WMATIC: `${\n      OBJECT_RECORD[Network.MAINNET].DEX_PACKAGE_ID\n    }::core::LPCoin<${VOLATILE[Network.MAINNET]}, ${MAINNET_BASE_COINS.SUI}, ${\n      MAINNET_BASE_COINS.NATIVE_WORMHOLE_WMATIC\n    }>`,\n    V_LP_SUI_NATIVE_WORMHOLE_WFTM: `${\n      OBJECT_RECORD[Network.MAINNET].DEX_PACKAGE_ID\n    }::core::LPCoin<${VOLATILE[Network.MAINNET]}, ${MAINNET_BASE_COINS.SUI}, ${\n      MAINNET_BASE_COINS.NATIVE_WORMHOLE_WFTM\n    }>`,\n    V_LP_SUI_NATIVE_WORMHOLE_CELO: `${\n      OBJECT_RECORD[Network.MAINNET].DEX_PACKAGE_ID\n    }::core::LPCoin<${VOLATILE[Network.MAINNET]}, ${MAINNET_BASE_COINS.SUI}, ${\n      MAINNET_BASE_COINS.NATIVE_WORMHOLE_CELO\n    }>`,\n    V_LP_SUI_NATIVE_WORMHOLE_WAVAX: `${\n      OBJECT_RECORD[Network.MAINNET].DEX_PACKAGE_ID\n    }::core::LPCoin<${VOLATILE[Network.MAINNET]}, ${MAINNET_BASE_COINS.SUI}, ${\n      MAINNET_BASE_COINS.NATIVE_WORMHOLE_WAVAX\n    }>`,\n    V_LP_SUI_BSC_WORMHOLE_ADA: `${\n      OBJECT_RECORD[Network.MAINNET].DEX_PACKAGE_ID\n    }::core::LPCoin<${VOLATILE[Network.MAINNET]}, ${MAINNET_BASE_COINS.SUI}, ${\n      MAINNET_BASE_COINS.BSC_WORMHOLE_ADA\n    }>`,\n    V_LP_SUI_BSC_WORMHOLE_BTCB: `${\n      OBJECT_RECORD[Network.MAINNET].DEX_PACKAGE_ID\n    }::core::LPCoin<${VOLATILE[Network.MAINNET]}, ${MAINNET_BASE_COINS.SUI}, ${\n      MAINNET_BASE_COINS.BSC_WORMHOLE_BTCB\n    }>`,\n    V_LP_SUI_BSC_WORMHOLE_USDT: `${\n      OBJECT_RECORD[Network.MAINNET].DEX_PACKAGE_ID\n    }::core::LPCoin<${VOLATILE[Network.MAINNET]}, ${MAINNET_BASE_COINS.SUI}, ${\n      MAINNET_BASE_COINS.BSC_WORMHOLE_USDT\n    }>`,\n    S_LP_BSC_WORMHOLE_USDT_BSC_WORMHOLE_USDC: `${\n      OBJECT_RECORD[Network.MAINNET].DEX_PACKAGE_ID\n    }::core::LPCoin<${STABLE[Network.MAINNET]}, ${\n      MAINNET_BASE_COINS.BSC_WORMHOLE_USDT\n    }, ${MAINNET_BASE_COINS.BSC_WORMHOLE_USDC}>`,\n    V_LP_SUI_BSC_WORMHOLE_USDC: `${\n      OBJECT_RECORD[Network.MAINNET].DEX_PACKAGE_ID\n    }::core::LPCoin<${VOLATILE[Network.MAINNET]}, ${MAINNET_BASE_COINS.SUI}, ${\n      MAINNET_BASE_COINS.BSC_WORMHOLE_USDC\n    }>`,\n    S_LP_ETH_WORMHOLE_USDC_BSC_WORMHOLE_USDC: `${\n      OBJECT_RECORD[Network.MAINNET].DEX_PACKAGE_ID\n    }::core::LPCoin<${STABLE[Network.MAINNET]}, ${\n      MAINNET_BASE_COINS.ETH_WORMHOLE_USDC\n    }, ${MAINNET_BASE_COINS.BSC_WORMHOLE_USDC}>`,\n    V_LP_SUI_BSC_WORMHOLE_FLOKI: `${\n      OBJECT_RECORD[Network.MAINNET].DEX_PACKAGE_ID\n    }::core::LPCoin<${VOLATILE[Network.MAINNET]}, ${MAINNET_BASE_COINS.SUI}, ${\n      MAINNET_BASE_COINS.BSC_WORMHOLE_FLOKI\n    }>`,\n    V_LP_SUI_BSC_WORMHOLE_DOGE: `${\n      OBJECT_RECORD[Network.MAINNET].DEX_PACKAGE_ID\n    }::core::LPCoin<${VOLATILE[Network.MAINNET]}, ${MAINNET_BASE_COINS.SUI}, ${\n      MAINNET_BASE_COINS.BSC_WORMHOLE_DOGE\n    }>`,\n    V_LP_SUI_BSC_WORMHOLE_ETH: `${\n      OBJECT_RECORD[Network.MAINNET].DEX_PACKAGE_ID\n    }::core::LPCoin<${VOLATILE[Network.MAINNET]}, ${MAINNET_BASE_COINS.SUI}, ${\n      MAINNET_BASE_COINS.BSC_WORMHOLE_ETH\n    }>`,\n    V_LP_SUI_NATIVE_WORMHOLE_SOL: `${\n      OBJECT_RECORD[Network.MAINNET].DEX_PACKAGE_ID\n    }::core::LPCoin<${VOLATILE[Network.MAINNET]}, ${MAINNET_BASE_COINS.SUI}, ${\n      MAINNET_BASE_COINS.NATIVE_WORMHOLE_SOL\n    }>`,\n  },\n};\n\nexport const DEX_BASE_TOKEN_ARRAY = {\n  [Network.DEVNET]: [COIN_TYPE[Network.DEVNET].ETH],\n  [Network.TESTNET]: [COIN_TYPE[Network.TESTNET].ETH],\n  [Network.MAINNET]: [\n    COIN_TYPE[Network.MAINNET].SUI,\n    COIN_TYPE[Network.MAINNET].ETH_WORMHOLE_USDC,\n    COIN_TYPE[Network.MAINNET].BSC_WORMHOLE_USDC,\n  ],\n};\n","import { Network } from './index';\n\nconst TEST_NET_POOLS = {\n  '0x2::coin::Coin<0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ibtc::IBTC>':\n    {\n      '0x2::coin::Coin<0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH>':\n        '0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::core::Pool<0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::curve::Volatile, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ibtc::IBTC, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH>',\n    },\n  '0x2::coin::Coin<0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH>':\n    {\n      '0x2::coin::Coin<0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ibtc::IBTC>':\n        '0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::core::Pool<0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::curve::Volatile, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ibtc::IBTC, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH>',\n      '0x2::coin::Coin<0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::iusdc::IUSDC>':\n        '0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::core::Pool<0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::curve::Volatile, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::iusdc::IUSDC>',\n      '0x2::coin::Coin<0x67bf2ef7d1947285b05566a6e46ca82708e0383556345e52c43bb56b8138410a::xvs::XVS>':\n        '0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::core::Pool<0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::curve::Volatile, 0x67bf2ef7d1947285b05566a6e46ca82708e0383556345e52c43bb56b8138410a::xvs::XVS, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH>',\n      '0x2::coin::Coin<0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::iusdt::IUSDT>':\n        '0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::core::Pool<0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::curve::Volatile, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::iusdt::IUSDT>',\n      '0x2::coin::Coin<0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ibnb::IBNB>':\n        '0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::core::Pool<0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::curve::Volatile, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ibnb::IBNB, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH>',\n      '0x2::coin::Coin<0x57e5622e674c7fd98303516920ac4250a0667e486e3617f71c8b448f1b032aed::ipx::IPX>':\n        '0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::core::Pool<0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::curve::Volatile, 0x57e5622e674c7fd98303516920ac4250a0667e486e3617f71c8b448f1b032aed::ipx::IPX, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH>',\n      '0x2::coin::Coin<0x2::sui::SUI>':\n        '0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::core::Pool<0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::curve::Volatile, 0x2::sui::SUI, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH>',\n    },\n  '0x2::coin::Coin<0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::iusdc::IUSDC>':\n    {\n      '0x2::coin::Coin<0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH>':\n        '0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::core::Pool<0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::curve::Volatile, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::iusdc::IUSDC>',\n      '0x2::coin::Coin<0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::iusdt::IUSDT>':\n        '0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::core::Pool<0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::curve::Stable, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::iusdc::IUSDC, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::iusdt::IUSDT>',\n    },\n  '0x2::coin::Coin<0x67bf2ef7d1947285b05566a6e46ca82708e0383556345e52c43bb56b8138410a::xvs::XVS>':\n    {\n      '0x2::coin::Coin<0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH>':\n        '0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::core::Pool<0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::curve::Volatile, 0x67bf2ef7d1947285b05566a6e46ca82708e0383556345e52c43bb56b8138410a::xvs::XVS, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH>',\n    },\n  '0x2::coin::Coin<0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::iusdt::IUSDT>':\n    {\n      '0x2::coin::Coin<0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH>':\n        '0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::core::Pool<0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::curve::Volatile, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::iusdt::IUSDT>',\n      '0x2::coin::Coin<0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::iusdc::IUSDC>':\n        '0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::core::Pool<0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::curve::Stable, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::iusdc::IUSDC, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::iusdt::IUSDT>',\n    },\n  '0x2::coin::Coin<0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ibnb::IBNB>':\n    {\n      '0x2::coin::Coin<0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH>':\n        '0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::core::Pool<0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::curve::Volatile, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ibnb::IBNB, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH>',\n    },\n  '0x2::coin::Coin<0x57e5622e674c7fd98303516920ac4250a0667e486e3617f71c8b448f1b032aed::ipx::IPX>':\n    {\n      '0x2::coin::Coin<0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH>':\n        '0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::core::Pool<0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::curve::Volatile, 0x57e5622e674c7fd98303516920ac4250a0667e486e3617f71c8b448f1b032aed::ipx::IPX, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH>',\n    },\n  '0x2::coin::Coin<0x2::sui::SUI>': {\n    '0x2::coin::Coin<0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH>':\n      '0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::core::Pool<0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::curve::Volatile, 0x2::sui::SUI, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH>',\n  },\n};\n\nconst DEV_NET_POOLS = {\n  '0x2::coin::Coin<0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH>':\n    {\n      '0x2::coin::Coin<0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::iusdc::IUSDC>':\n        '0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::core::Pool<0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::curve::Volatile, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::iusdc::IUSDC>',\n      '0x2::coin::Coin<0x2::sui::SUI>':\n        '0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::core::Pool<0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::curve::Volatile, 0x2::sui::SUI, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH>',\n      '0x2::coin::Coin<0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ibtc::IBTC>':\n        '0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::core::Pool<0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::curve::Volatile, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ibtc::IBTC, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH>',\n      '0x2::coin::Coin<0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ibnb::IBNB>':\n        '0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::core::Pool<0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::curve::Volatile, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ibnb::IBNB, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH>',\n      '0x2::coin::Coin<0x7526f2ab7890276a8bdf4c3167683e2df079781fc3c3a6e1e0bdb95722014954::ipx::IPX>':\n        '0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::core::Pool<0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::curve::Volatile, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH, 0x7526f2ab7890276a8bdf4c3167683e2df079781fc3c3a6e1e0bdb95722014954::ipx::IPX>',\n      '0x2::coin::Coin<0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::iusdt::IUSDT>':\n        '0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::core::Pool<0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::curve::Volatile, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::iusdt::IUSDT>',\n    },\n  '0x2::coin::Coin<0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::iusdc::IUSDC>':\n    {\n      '0x2::coin::Coin<0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH>':\n        '0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::core::Pool<0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::curve::Volatile, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::iusdc::IUSDC>',\n      '0x2::coin::Coin<0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::iusdt::IUSDT>':\n        '0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::core::Pool<0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::curve::Stable, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::iusdc::IUSDC, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::iusdt::IUSDT>',\n    },\n  '0x2::coin::Coin<0x2::sui::SUI>': {\n    '0x2::coin::Coin<0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH>':\n      '0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::core::Pool<0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::curve::Volatile, 0x2::sui::SUI, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH>',\n  },\n  '0x2::coin::Coin<0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ibtc::IBTC>':\n    {\n      '0x2::coin::Coin<0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH>':\n        '0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::core::Pool<0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::curve::Volatile, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ibtc::IBTC, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH>',\n    },\n  '0x2::coin::Coin<0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ibnb::IBNB>':\n    {\n      '0x2::coin::Coin<0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH>':\n        '0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::core::Pool<0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::curve::Volatile, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ibnb::IBNB, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH>',\n    },\n  '0x2::coin::Coin<0x7526f2ab7890276a8bdf4c3167683e2df079781fc3c3a6e1e0bdb95722014954::ipx::IPX>':\n    {\n      '0x2::coin::Coin<0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH>':\n        '0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::core::Pool<0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::curve::Volatile, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH, 0x7526f2ab7890276a8bdf4c3167683e2df079781fc3c3a6e1e0bdb95722014954::ipx::IPX>',\n    },\n  '0x2::coin::Coin<0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::iusdt::IUSDT>':\n    {\n      '0x2::coin::Coin<0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::iusdc::IUSDC>':\n        '0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::core::Pool<0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::curve::Stable, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::iusdc::IUSDC, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::iusdt::IUSDT>',\n      '0x2::coin::Coin<0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH>':\n        '0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::core::Pool<0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::curve::Volatile, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::iusdt::IUSDT>',\n    },\n};\n\nconst MAIN_NET_POOLS = {\n  '0x2::coin::Coin<0x2::sui::SUI>': {\n    '0x2::coin::Coin<0x361fcb86803eea2403007250638f3c8427249168ac77fee74b7129bdc05b2586::aifrens::AIFRENS>':\n      '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x361fcb86803eea2403007250638f3c8427249168ac77fee74b7129bdc05b2586::aifrens::AIFRENS>',\n    '0x2::coin::Coin<0xb848cce11ef3a8f62eccea6eb5b35a12c4c2b1ee1af7755d02d7bd6218e8226f::coin::COIN>':\n      '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xb848cce11ef3a8f62eccea6eb5b35a12c4c2b1ee1af7755d02d7bd6218e8226f::coin::COIN>',\n    '0x2::coin::Coin<0xa198f3be41cda8c07b3bf3fee02263526e535d682499806979a111e88a5a8d0f::coin::COIN>':\n      '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xa198f3be41cda8c07b3bf3fee02263526e535d682499806979a111e88a5a8d0f::coin::COIN>',\n    '0x2::coin::Coin<0xbde18964049a1226f6e30dd2058ac03205d3d7c6f7a3062760a70e20a4b49d1c::wojak_coin::WOJAK_COIN>':\n      '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xbde18964049a1226f6e30dd2058ac03205d3d7c6f7a3062760a70e20a4b49d1c::wojak_coin::WOJAK_COIN>',\n    '0x2::coin::Coin<0xd735282698c3093adf91c59ba5fa3294112d7dd713beb4f7753eac4637bd47a1::bark::BARK>':\n      '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xd735282698c3093adf91c59ba5fa3294112d7dd713beb4f7753eac4637bd47a1::bark::BARK>',\n    '0x2::coin::Coin<0xd399b358bd0e835000f6caa8c771a7d186499b6e62d413c2fd6cfed709689f28::coin::COIN>':\n      '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xd399b358bd0e835000f6caa8c771a7d186499b6e62d413c2fd6cfed709689f28::coin::COIN>',\n    '0x2::coin::Coin<0x5029d5a94429a73b8036cd67192d9c5e09bbc2c0fee942d50075a9edba66744f::coin::COIN>':\n      '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x5029d5a94429a73b8036cd67192d9c5e09bbc2c0fee942d50075a9edba66744f::coin::COIN>',\n    '0x2::coin::Coin<0x4eac6573f65e7db5aea5a23e1335993a57e088dcd4aff7934059d9a6311d8655::coin::COIN>':\n      '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x4eac6573f65e7db5aea5a23e1335993a57e088dcd4aff7934059d9a6311d8655::coin::COIN>',\n    '0x2::coin::Coin<0xaf8cd5edc19c4512f4259f0bee101a40d41ebed738ade5874359610ef8eeced5::coin::COIN>':\n      '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xaf8cd5edc19c4512f4259f0bee101a40d41ebed738ade5874359610ef8eeced5::coin::COIN>',\n    '0x2::coin::Coin<0xdbe380b13a6d0f5cdedd58de8f04625263f113b3f9db32b3e1983f49e2841676::coin::COIN>':\n      '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xdbe380b13a6d0f5cdedd58de8f04625263f113b3f9db32b3e1983f49e2841676::coin::COIN>',\n    '0x2::coin::Coin<0x6aa03a9dc71d89ee86827ecfe58a840f34c7b6e5ecb5f2ee00495084e18b0b33::trollface::TROLLFACE>':\n      '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x6aa03a9dc71d89ee86827ecfe58a840f34c7b6e5ecb5f2ee00495084e18b0b33::trollface::TROLLFACE>',\n    '0x2::coin::Coin<0xe2872bf9ede9074a333308a7b91026912aa68b83672b7d3b3f5f8dd96c44a0a2::suidoge::SUIDOGE>':\n      '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xe2872bf9ede9074a333308a7b91026912aa68b83672b7d3b3f5f8dd96c44a0a2::suidoge::SUIDOGE>',\n    '0x2::coin::Coin<0xb401bf55ff040aa270f3ebe48eb8e922f6ec8039de12fe87bbd8353d138e0c4f::SAPE::SAPE>':\n      '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xb401bf55ff040aa270f3ebe48eb8e922f6ec8039de12fe87bbd8353d138e0c4f::SAPE::SAPE>',\n    '0x2::coin::Coin<0x737ead67630854fc0775f6ff901e8a2ac9f8a6304adbce228b5db478b5f3fa6::suishib::SUISHIB>':\n      '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x737ead67630854fc0775f6ff901e8a2ac9f8a6304adbce228b5db478b5f3fa6::suishib::SUISHIB>',\n    '0x2::coin::Coin<0x9a399e218c15b0d1e546ebe95521ee327a30ca9b129b378cfa422aefec53f758::brcsui::BRCSUI>':\n      '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x9a399e218c15b0d1e546ebe95521ee327a30ca9b129b378cfa422aefec53f758::brcsui::BRCSUI>',\n    '0x2::coin::Coin<0x1e8b532cca6569cab9f9b9ebc73f8c13885012ade714729aa3b450e0339ac766::coin::COIN>':\n      '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x1e8b532cca6569cab9f9b9ebc73f8c13885012ade714729aa3b450e0339ac766::coin::COIN>',\n    '0x2::coin::Coin<0x5cc7b6ed0ce0d43d08667793f6efe7a34d678a780755dc37ea8bfa8805f63327::coin::COIN>':\n      '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x5cc7b6ed0ce0d43d08667793f6efe7a34d678a780755dc37ea8bfa8805f63327::coin::COIN>',\n    '0x2::coin::Coin<0x909cba62ce96d54de25bec9502de5ca7b4f28901747bbf96b76c2e63ec5f1cba::coin::COIN>':\n      '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x909cba62ce96d54de25bec9502de5ca7b4f28901747bbf96b76c2e63ec5f1cba::coin::COIN>',\n    '0x2::coin::Coin<0x5752303296c20e98336c11e527c8100bf8c8f4757d6ba8d5e7dda11b0eb34afc::XGOAT::XGOAT>':\n      '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x5752303296c20e98336c11e527c8100bf8c8f4757d6ba8d5e7dda11b0eb34afc::XGOAT::XGOAT>',\n    '0x2::coin::Coin<0xebbf537bc3686be32fe22b498b42715641bbb209267be72236a352e0444cc5df::sui_pepe::SUI_PEPE>':\n      '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xebbf537bc3686be32fe22b498b42715641bbb209267be72236a352e0444cc5df::sui_pepe::SUI_PEPE>',\n    '0x2::coin::Coin<0x6081300950a4f1e2081580e919c210436a1bed49080502834950d31ee55a2396::coin::COIN>':\n      '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x6081300950a4f1e2081580e919c210436a1bed49080502834950d31ee55a2396::coin::COIN>',\n    '0x2::coin::Coin<0x1a4790c0a675dac9d3b9f1b01a3514130fe26c768485e93a388df493c24ac170::suijak::SUIJAK>':\n      '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x1a4790c0a675dac9d3b9f1b01a3514130fe26c768485e93a388df493c24ac170::suijak::SUIJAK>',\n    '0x2::coin::Coin<0xc060006111016b8a020ad5b33834984a437aaa7d3c74c18e09a95d48aceab08c::coin::COIN>':\n      '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xc060006111016b8a020ad5b33834984a437aaa7d3c74c18e09a95d48aceab08c::coin::COIN>',\n    '0x2::coin::Coin<0x57788e291373f223be4e09e7d8bf0e05db9a11c3cc2df6b32abdab30329f2918::SUIFROG::SUIFROG>':\n      '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x57788e291373f223be4e09e7d8bf0e05db9a11c3cc2df6b32abdab30329f2918::SUIFROG::SUIFROG>',\n    '0x2::coin::Coin<0xad6a66848f713d04b258b121604f57e8a4d3b4a9707697cb79391c0bf6bba888::ORDI::ORDI>':\n      '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xad6a66848f713d04b258b121604f57e8a4d3b4a9707697cb79391c0bf6bba888::ORDI::ORDI>',\n    '0x2::coin::Coin<0x5d4b302506645c37ff133b98c4b50a5ae14841659738d6d733d59d0d217a93bf::coin::COIN>':\n      '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x5d4b302506645c37ff133b98c4b50a5ae14841659738d6d733d59d0d217a93bf::coin::COIN>',\n    '0x2::coin::Coin<0xb7844e289a8410e50fb3ca48d69eb9cf29e27d223ef90353fe1bd8e27ff8f3f8::coin::COIN>':\n      '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xb7844e289a8410e50fb3ca48d69eb9cf29e27d223ef90353fe1bd8e27ff8f3f8::coin::COIN>',\n    '0x2::coin::Coin<0xf73024bd5f0450745f555ddd40964f2d6798afc47b5dd46c6c53e50b9186d90e::duckies::DUCKIES>':\n      '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xf73024bd5f0450745f555ddd40964f2d6798afc47b5dd46c6c53e50b9186d90e::duckies::DUCKIES>',\n    '0x2::coin::Coin<0xbcbbd5c23edf35fc279e21ebc129a1187dbfa5b086c63a8e7ff202865888b27b::coin::COIN>':\n      '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xbcbbd5c23edf35fc279e21ebc129a1187dbfa5b086c63a8e7ff202865888b27b::coin::COIN>',\n    '0x2::coin::Coin<0x603b488c87e0d1df64560a61418c87238d440a29ee39bbd757b0c92d38a35c7c::coin::COIN>':\n      '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x603b488c87e0d1df64560a61418c87238d440a29ee39bbd757b0c92d38a35c7c::coin::COIN>',\n    '0x2::coin::Coin<0x46741a35920c2c34117011bb0e8e6341d8c4427220ad8949475d4f41218558ce::suiboba::SUIBOBA>':\n      '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x46741a35920c2c34117011bb0e8e6341d8c4427220ad8949475d4f41218558ce::suiboba::SUIBOBA>',\n  },\n  '0x2::coin::Coin<0x361fcb86803eea2403007250638f3c8427249168ac77fee74b7129bdc05b2586::aifrens::AIFRENS>':\n    {\n      '0x2::coin::Coin<0x2::sui::SUI>':\n        '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x361fcb86803eea2403007250638f3c8427249168ac77fee74b7129bdc05b2586::aifrens::AIFRENS>',\n    },\n  '0x2::coin::Coin<0xb848cce11ef3a8f62eccea6eb5b35a12c4c2b1ee1af7755d02d7bd6218e8226f::coin::COIN>':\n    {\n      '0x2::coin::Coin<0x2::sui::SUI>':\n        '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xb848cce11ef3a8f62eccea6eb5b35a12c4c2b1ee1af7755d02d7bd6218e8226f::coin::COIN>',\n    },\n  '0x2::coin::Coin<0xa198f3be41cda8c07b3bf3fee02263526e535d682499806979a111e88a5a8d0f::coin::COIN>':\n    {\n      '0x2::coin::Coin<0x2::sui::SUI>':\n        '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xa198f3be41cda8c07b3bf3fee02263526e535d682499806979a111e88a5a8d0f::coin::COIN>',\n    },\n  '0x2::coin::Coin<0x5d4b302506645c37ff133b98c4b50a5ae14841659738d6d733d59d0d217a93bf::coin::COIN>':\n    {\n      '0x2::coin::Coin<0xc060006111016b8a020ad5b33834984a437aaa7d3c74c18e09a95d48aceab08c::coin::COIN>':\n        '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Stable, 0x5d4b302506645c37ff133b98c4b50a5ae14841659738d6d733d59d0d217a93bf::coin::COIN, 0xc060006111016b8a020ad5b33834984a437aaa7d3c74c18e09a95d48aceab08c::coin::COIN>',\n      '0x2::coin::Coin<0x909cba62ce96d54de25bec9502de5ca7b4f28901747bbf96b76c2e63ec5f1cba::coin::COIN>':\n        '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Stable, 0x5d4b302506645c37ff133b98c4b50a5ae14841659738d6d733d59d0d217a93bf::coin::COIN, 0x909cba62ce96d54de25bec9502de5ca7b4f28901747bbf96b76c2e63ec5f1cba::coin::COIN>',\n      '0x2::coin::Coin<0x2::sui::SUI>':\n        '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x5d4b302506645c37ff133b98c4b50a5ae14841659738d6d733d59d0d217a93bf::coin::COIN>',\n    },\n  '0x2::coin::Coin<0xc060006111016b8a020ad5b33834984a437aaa7d3c74c18e09a95d48aceab08c::coin::COIN>':\n    {\n      '0x2::coin::Coin<0x5d4b302506645c37ff133b98c4b50a5ae14841659738d6d733d59d0d217a93bf::coin::COIN>':\n        '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Stable, 0x5d4b302506645c37ff133b98c4b50a5ae14841659738d6d733d59d0d217a93bf::coin::COIN, 0xc060006111016b8a020ad5b33834984a437aaa7d3c74c18e09a95d48aceab08c::coin::COIN>',\n      '0x2::coin::Coin<0x2::sui::SUI>':\n        '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xc060006111016b8a020ad5b33834984a437aaa7d3c74c18e09a95d48aceab08c::coin::COIN>',\n    },\n  '0x2::coin::Coin<0xbde18964049a1226f6e30dd2058ac03205d3d7c6f7a3062760a70e20a4b49d1c::wojak_coin::WOJAK_COIN>':\n    {\n      '0x2::coin::Coin<0x2::sui::SUI>':\n        '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xbde18964049a1226f6e30dd2058ac03205d3d7c6f7a3062760a70e20a4b49d1c::wojak_coin::WOJAK_COIN>',\n    },\n  '0x2::coin::Coin<0xd735282698c3093adf91c59ba5fa3294112d7dd713beb4f7753eac4637bd47a1::bark::BARK>':\n    {\n      '0x2::coin::Coin<0x2::sui::SUI>':\n        '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xd735282698c3093adf91c59ba5fa3294112d7dd713beb4f7753eac4637bd47a1::bark::BARK>',\n    },\n  '0x2::coin::Coin<0xd399b358bd0e835000f6caa8c771a7d186499b6e62d413c2fd6cfed709689f28::coin::COIN>':\n    {\n      '0x2::coin::Coin<0x2::sui::SUI>':\n        '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xd399b358bd0e835000f6caa8c771a7d186499b6e62d413c2fd6cfed709689f28::coin::COIN>',\n    },\n  '0x2::coin::Coin<0x5029d5a94429a73b8036cd67192d9c5e09bbc2c0fee942d50075a9edba66744f::coin::COIN>':\n    {\n      '0x2::coin::Coin<0x2::sui::SUI>':\n        '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x5029d5a94429a73b8036cd67192d9c5e09bbc2c0fee942d50075a9edba66744f::coin::COIN>',\n    },\n  '0x2::coin::Coin<0x4eac6573f65e7db5aea5a23e1335993a57e088dcd4aff7934059d9a6311d8655::coin::COIN>':\n    {\n      '0x2::coin::Coin<0x2::sui::SUI>':\n        '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x4eac6573f65e7db5aea5a23e1335993a57e088dcd4aff7934059d9a6311d8655::coin::COIN>',\n    },\n  '0x2::coin::Coin<0xaf8cd5edc19c4512f4259f0bee101a40d41ebed738ade5874359610ef8eeced5::coin::COIN>':\n    {\n      '0x2::coin::Coin<0x2::sui::SUI>':\n        '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xaf8cd5edc19c4512f4259f0bee101a40d41ebed738ade5874359610ef8eeced5::coin::COIN>',\n    },\n  '0x2::coin::Coin<0xdbe380b13a6d0f5cdedd58de8f04625263f113b3f9db32b3e1983f49e2841676::coin::COIN>':\n    {\n      '0x2::coin::Coin<0x2::sui::SUI>':\n        '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xdbe380b13a6d0f5cdedd58de8f04625263f113b3f9db32b3e1983f49e2841676::coin::COIN>',\n    },\n  '0x2::coin::Coin<0x6aa03a9dc71d89ee86827ecfe58a840f34c7b6e5ecb5f2ee00495084e18b0b33::trollface::TROLLFACE>':\n    {\n      '0x2::coin::Coin<0x2::sui::SUI>':\n        '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x6aa03a9dc71d89ee86827ecfe58a840f34c7b6e5ecb5f2ee00495084e18b0b33::trollface::TROLLFACE>',\n    },\n  '0x2::coin::Coin<0xe2872bf9ede9074a333308a7b91026912aa68b83672b7d3b3f5f8dd96c44a0a2::suidoge::SUIDOGE>':\n    {\n      '0x2::coin::Coin<0x2::sui::SUI>':\n        '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xe2872bf9ede9074a333308a7b91026912aa68b83672b7d3b3f5f8dd96c44a0a2::suidoge::SUIDOGE>',\n    },\n  '0x2::coin::Coin<0x603b488c87e0d1df64560a61418c87238d440a29ee39bbd757b0c92d38a35c7c::coin::COIN>':\n    {\n      '0x2::coin::Coin<0x909cba62ce96d54de25bec9502de5ca7b4f28901747bbf96b76c2e63ec5f1cba::coin::COIN>':\n        '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Stable, 0x603b488c87e0d1df64560a61418c87238d440a29ee39bbd757b0c92d38a35c7c::coin::COIN, 0x909cba62ce96d54de25bec9502de5ca7b4f28901747bbf96b76c2e63ec5f1cba::coin::COIN>',\n      '0x2::coin::Coin<0x2::sui::SUI>':\n        '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x603b488c87e0d1df64560a61418c87238d440a29ee39bbd757b0c92d38a35c7c::coin::COIN>',\n    },\n  '0x2::coin::Coin<0x909cba62ce96d54de25bec9502de5ca7b4f28901747bbf96b76c2e63ec5f1cba::coin::COIN>':\n    {\n      '0x2::coin::Coin<0x603b488c87e0d1df64560a61418c87238d440a29ee39bbd757b0c92d38a35c7c::coin::COIN>':\n        '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Stable, 0x603b488c87e0d1df64560a61418c87238d440a29ee39bbd757b0c92d38a35c7c::coin::COIN, 0x909cba62ce96d54de25bec9502de5ca7b4f28901747bbf96b76c2e63ec5f1cba::coin::COIN>',\n      '0x2::coin::Coin<0x2::sui::SUI>':\n        '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x909cba62ce96d54de25bec9502de5ca7b4f28901747bbf96b76c2e63ec5f1cba::coin::COIN>',\n      '0x2::coin::Coin<0x5d4b302506645c37ff133b98c4b50a5ae14841659738d6d733d59d0d217a93bf::coin::COIN>':\n        '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Stable, 0x5d4b302506645c37ff133b98c4b50a5ae14841659738d6d733d59d0d217a93bf::coin::COIN, 0x909cba62ce96d54de25bec9502de5ca7b4f28901747bbf96b76c2e63ec5f1cba::coin::COIN>',\n    },\n  '0x2::coin::Coin<0xb401bf55ff040aa270f3ebe48eb8e922f6ec8039de12fe87bbd8353d138e0c4f::SAPE::SAPE>':\n    {\n      '0x2::coin::Coin<0x2::sui::SUI>':\n        '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xb401bf55ff040aa270f3ebe48eb8e922f6ec8039de12fe87bbd8353d138e0c4f::SAPE::SAPE>',\n    },\n  '0x2::coin::Coin<0x737ead67630854fc0775f6ff901e8a2ac9f8a6304adbce228b5db478b5f3fa6::suishib::SUISHIB>':\n    {\n      '0x2::coin::Coin<0x2::sui::SUI>':\n        '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x737ead67630854fc0775f6ff901e8a2ac9f8a6304adbce228b5db478b5f3fa6::suishib::SUISHIB>',\n    },\n  '0x2::coin::Coin<0x9a399e218c15b0d1e546ebe95521ee327a30ca9b129b378cfa422aefec53f758::brcsui::BRCSUI>':\n    {\n      '0x2::coin::Coin<0x2::sui::SUI>':\n        '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x9a399e218c15b0d1e546ebe95521ee327a30ca9b129b378cfa422aefec53f758::brcsui::BRCSUI>',\n    },\n  '0x2::coin::Coin<0x1e8b532cca6569cab9f9b9ebc73f8c13885012ade714729aa3b450e0339ac766::coin::COIN>':\n    {\n      '0x2::coin::Coin<0x2::sui::SUI>':\n        '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x1e8b532cca6569cab9f9b9ebc73f8c13885012ade714729aa3b450e0339ac766::coin::COIN>',\n    },\n  '0x2::coin::Coin<0x5cc7b6ed0ce0d43d08667793f6efe7a34d678a780755dc37ea8bfa8805f63327::coin::COIN>':\n    {\n      '0x2::coin::Coin<0x2::sui::SUI>':\n        '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x5cc7b6ed0ce0d43d08667793f6efe7a34d678a780755dc37ea8bfa8805f63327::coin::COIN>',\n    },\n  '0x2::coin::Coin<0x5752303296c20e98336c11e527c8100bf8c8f4757d6ba8d5e7dda11b0eb34afc::XGOAT::XGOAT>':\n    {\n      '0x2::coin::Coin<0x2::sui::SUI>':\n        '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x5752303296c20e98336c11e527c8100bf8c8f4757d6ba8d5e7dda11b0eb34afc::XGOAT::XGOAT>',\n    },\n  '0x2::coin::Coin<0xebbf537bc3686be32fe22b498b42715641bbb209267be72236a352e0444cc5df::sui_pepe::SUI_PEPE>':\n    {\n      '0x2::coin::Coin<0x2::sui::SUI>':\n        '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xebbf537bc3686be32fe22b498b42715641bbb209267be72236a352e0444cc5df::sui_pepe::SUI_PEPE>',\n    },\n  '0x2::coin::Coin<0x6081300950a4f1e2081580e919c210436a1bed49080502834950d31ee55a2396::coin::COIN>':\n    {\n      '0x2::coin::Coin<0x2::sui::SUI>':\n        '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x6081300950a4f1e2081580e919c210436a1bed49080502834950d31ee55a2396::coin::COIN>',\n    },\n  '0x2::coin::Coin<0x1a4790c0a675dac9d3b9f1b01a3514130fe26c768485e93a388df493c24ac170::suijak::SUIJAK>':\n    {\n      '0x2::coin::Coin<0x2::sui::SUI>':\n        '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x1a4790c0a675dac9d3b9f1b01a3514130fe26c768485e93a388df493c24ac170::suijak::SUIJAK>',\n    },\n  '0x2::coin::Coin<0x57788e291373f223be4e09e7d8bf0e05db9a11c3cc2df6b32abdab30329f2918::SUIFROG::SUIFROG>':\n    {\n      '0x2::coin::Coin<0x2::sui::SUI>':\n        '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x57788e291373f223be4e09e7d8bf0e05db9a11c3cc2df6b32abdab30329f2918::SUIFROG::SUIFROG>',\n    },\n  '0x2::coin::Coin<0xad6a66848f713d04b258b121604f57e8a4d3b4a9707697cb79391c0bf6bba888::ORDI::ORDI>':\n    {\n      '0x2::coin::Coin<0x2::sui::SUI>':\n        '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xad6a66848f713d04b258b121604f57e8a4d3b4a9707697cb79391c0bf6bba888::ORDI::ORDI>',\n    },\n  '0x2::coin::Coin<0xb7844e289a8410e50fb3ca48d69eb9cf29e27d223ef90353fe1bd8e27ff8f3f8::coin::COIN>':\n    {\n      '0x2::coin::Coin<0x2::sui::SUI>':\n        '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xb7844e289a8410e50fb3ca48d69eb9cf29e27d223ef90353fe1bd8e27ff8f3f8::coin::COIN>',\n    },\n  '0x2::coin::Coin<0xf73024bd5f0450745f555ddd40964f2d6798afc47b5dd46c6c53e50b9186d90e::duckies::DUCKIES>':\n    {\n      '0x2::coin::Coin<0x2::sui::SUI>':\n        '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xf73024bd5f0450745f555ddd40964f2d6798afc47b5dd46c6c53e50b9186d90e::duckies::DUCKIES>',\n    },\n  '0x2::coin::Coin<0xbcbbd5c23edf35fc279e21ebc129a1187dbfa5b086c63a8e7ff202865888b27b::coin::COIN>':\n    {\n      '0x2::coin::Coin<0x2::sui::SUI>':\n        '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xbcbbd5c23edf35fc279e21ebc129a1187dbfa5b086c63a8e7ff202865888b27b::coin::COIN>',\n    },\n  '0x2::coin::Coin<0x46741a35920c2c34117011bb0e8e6341d8c4427220ad8949475d4f41218558ce::suiboba::SUIBOBA>':\n    {\n      '0x2::coin::Coin<0x2::sui::SUI>':\n        '0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x46741a35920c2c34117011bb0e8e6341d8c4427220ad8949475d4f41218558ce::suiboba::SUIBOBA>',\n    },\n};\n\nexport const POOLS = {\n  [Network.TESTNET]: DEV_NET_POOLS,\n  [Network.DEVNET]: TEST_NET_POOLS,\n  [Network.MAINNET]: MAIN_NET_POOLS,\n};\n","import { toHEX } from '@mysten/bcs';\nimport {\n  isValidSuiAddress,\n  JsonRpcProvider,\n  TransactionBlock,\n} from '@mysten/sui.js';\nimport { bcs, SUI_CLOCK_OBJECT_ID } from '@mysten/sui.js';\nimport { pathOr, propOr } from 'ramda';\nimport invariant from 'tiny-invariant';\n\nimport {\n  DEX_FUNCTION_TO_GET_AMOUNT_FUNCTION_MAP,\n  Network,\n  OBJECT_RECORD,\n  Pool,\n  ZERO_ADDRESS,\n} from '@/constants';\nimport { DEX_BASE_TOKEN_ARRAY, STABLE, VOLATILE } from '@/constants/coins';\nimport { Address, DexMarket, SwapPathObject } from '@/types';\nimport {\n  findAllMarkets,\n  getAllDynamicFields,\n  getCoinsFromPoolType,\n  getReturnValuesFromInspectResults,\n  parseRawDEXMarkets,\n  processPool,\n} from '@/utils';\n\nimport { POOLS } from '../constants/pools';\nimport {\n  AddLiquidityArgs,\n  CreatePoolArgs,\n  FindPoolIdArgs,\n  QuoteAddLiquidityArgs,\n  QuoteRemoveLiquidityArgs,\n  QuoteSwapArgs,\n  QuoteSwapReturn,\n  RemoveLiquidityArgs,\n  SwapArgs,\n} from './sdk.types';\n\nexport class SDK {\n  #POOLS: Record<string, Record<string, string>>;\n\n  constructor(\n    public readonly provider: JsonRpcProvider,\n    public readonly network: Network,\n  ) {\n    invariant(Object.values(Network).includes(network), 'Invalid network');\n\n    this.#POOLS = POOLS[network];\n  }\n\n  /**\n   * @description It returns the pool object id from a set of two ordered coin types If it returns null, it means the pool is not deployed.\n   * @param tokenAType The coin A in Pool<A, B>\n   * @param tokenBType The coin B in Pool<A,B>\n   * @param account The caller account, it will default to @0x0 if not passed\n   */\n  public async findPoolId({\n    tokenAType,\n    tokenBType,\n    stable,\n    account = ZERO_ADDRESS,\n  }: FindPoolIdArgs): Promise<Address | null> {\n    invariant(isValidSuiAddress(account), 'Invalid Sui Address');\n    const txb = new TransactionBlock();\n\n    const objects = OBJECT_RECORD[this.network];\n\n    txb.moveCall({\n      target: `${objects.DEX_PACKAGE_ID}::interface::get_pool_id`,\n      typeArguments: [\n        stable ? STABLE[this.network] : VOLATILE[this.network],\n        tokenAType,\n        tokenBType,\n      ],\n      arguments: [txb.object(objects.DEX_CORE_STORAGE)],\n    });\n\n    const response = await this.provider.devInspectTransactionBlock({\n      transactionBlock: txb,\n      sender: account || ZERO_ADDRESS,\n    });\n\n    if (response.effects.status.status === 'failure') return null;\n\n    const data = getReturnValuesFromInspectResults(response);\n\n    if (!data || !data.length) return null;\n\n    return `0x${toHEX(Uint8Array.from(data[0][0]))}`;\n  }\n\n  /**\n   * @description It returns a {TransactionBlock} to be called\n   * @param txb The {TransactionBlock} that will be returned\n   * @param coinA An ObjectTransactionArgument of Coin0 on Pool<0,1>\n   * @param coinB An ObjectTransactionArgument of Coin1 on Pool<0,1>\n   * @param coinAAmount The desired value to add for coin0\n   * @param coinBAmount The desired value to add for coin1\n   * @param coinAType The type of Coin0\n   * @param coinBType The type of Coin1\n   * @return txb {TransactionBlock}\n   */\n  public createVolatilePool({\n    txb,\n    coinAList,\n    coinBList,\n    coinAAmount,\n    coinBAmount,\n    coinAType,\n    coinBType,\n  }: CreatePoolArgs): TransactionBlock {\n    invariant(+coinAAmount > 0, 'Cannot add coinAAmount');\n    invariant(+coinBAmount > 0, 'Cannot add coinBAmount');\n\n    const objects = OBJECT_RECORD[this.network];\n\n    txb.moveCall({\n      target: `${objects.DEX_PACKAGE_ID}::interface::create_v_pool`,\n      typeArguments: [coinAType, coinBType],\n      arguments: [\n        txb.object(objects.DEX_CORE_STORAGE),\n        txb.object(SUI_CLOCK_OBJECT_ID),\n        txb.makeMoveVec({\n          objects: coinAList,\n        }),\n        txb.makeMoveVec({\n          objects: coinBList,\n        }),\n        txb.pure(coinAAmount),\n        txb.pure(coinBAmount),\n      ],\n    });\n\n    return txb;\n  }\n\n  /**\n   * @description It returns a {TransactionBlock} to be called\n   * @param txb The {TransactionBlock} that will be returned\n   * @param coinA An ObjectTransactionArgument of Coin0 on Pool<0,1>\n   * @param coinB An ObjectTransactionArgument of Coin1 on Pool<0,1>\n   * @param coinAAmount The desired value to add for coin0\n   * @param coinBAmount The desired value to add for coin1\n   * @param coinAType The type of Coin0\n   * @param coinBType The type of Coin1\n   * @return txb {TransactionBlock}\n   */\n  public async createStablePool({\n    txb,\n    coinAList,\n    coinBList,\n    coinAAmount,\n    coinBAmount,\n    coinAType,\n    coinBType,\n  }: CreatePoolArgs): Promise<TransactionBlock> {\n    invariant(+coinAAmount > 0, 'Cannot add coinAAmount');\n    invariant(+coinBAmount > 0, 'Cannot add coinBAmount');\n\n    const objects = OBJECT_RECORD[this.network];\n\n    const coinAMetadata = await this.provider.getCoinMetadata({\n      coinType: coinAType,\n    });\n    const coinBMetadata = await this.provider.getCoinMetadata({\n      coinType: coinAType,\n    });\n\n    invariant(!!coinAMetadata, 'coinAType does not have a metadata');\n    invariant(!!coinBMetadata, 'coinBType does not have a metadata');\n\n    txb.moveCall({\n      target: `${objects.DEX_PACKAGE_ID}::interface::create_s_pool`,\n      typeArguments: [coinAType, coinBType],\n      arguments: [\n        txb.object(objects.DEX_CORE_STORAGE),\n        txb.object(SUI_CLOCK_OBJECT_ID),\n        txb.makeMoveVec({\n          objects: coinAList,\n        }),\n        txb.makeMoveVec({\n          objects: coinBList,\n        }),\n        txb.pure(coinAAmount),\n        txb.pure(coinBAmount),\n        txb.object(propOr('', 'id', coinAMetadata)),\n        txb.object(propOr('', 'id', coinBMetadata)),\n      ],\n    });\n\n    return txb;\n  }\n\n  /**\n   * @param txb The {TransactionBlock} class to chain\n   * @param coinInList An Array of objects being sold Coin\n   * @param coinInAmount The amount of the coin being sold\n   * @param coinInType The type of the coin being sold\n   * @param coinOutType The type of the coin being bought\n   * @param coinOutMinimumAmount The minimum amount to receive in coinOutType to control slippage\n   * @param useCache It defaults to false. If it is false, we will first fetch the latest pools data. If not, we will use a cache.\n   * @param deadline 30 represents 30 minutes. The TX will be cancelled if not processed within the deadline\n   * @param dexMarkets An object of Pools\n   */\n  public async swap({\n    txb,\n    coinInList,\n    coinInAmount,\n    coinInType,\n    coinOutType,\n    coinOutMinimumAmount,\n    useCache = false,\n    dexMarkets,\n    deadline = '30',\n  }: SwapArgs): Promise<TransactionBlock> {\n    invariant(+coinInAmount > 0, 'Cannot add coinAAmount');\n\n    const quoteSwapData = await this.quoteSwap({\n      coinInAmount,\n      coinInType,\n      coinOutType,\n      markets: dexMarkets\n        ? dexMarkets\n        : useCache\n        ? this.#POOLS\n        : await this.getLatestDEXMarkets(),\n    });\n\n    invariant(!!quoteSwapData, 'No Market for those coins');\n\n    const objects = OBJECT_RECORD[this.network];\n\n    const nowTime = new Date().getTime();\n\n    const swapObject = quoteSwapData.swapObject;\n\n    // no hop swap\n    if (!swapObject.baseTokens.length) {\n      txb.moveCall({\n        target: `${objects.DEX_PACKAGE_ID}::interface::${swapObject.functionName}`,\n        typeArguments: swapObject.typeArgs,\n        arguments: [\n          txb.object(objects.DEX_CORE_STORAGE),\n          txb.object(SUI_CLOCK_OBJECT_ID),\n          txb.makeMoveVec({\n            objects: coinInList,\n          }),\n          txb.pure(coinInAmount),\n          txb.pure(coinOutMinimumAmount),\n          txb.pure((nowTime + +deadline * 60 * 1000).toString()),\n        ],\n      });\n\n      return txb;\n    }\n\n    // One-hop Swap\n    txb.moveCall({\n      target: `${objects.DEX_PACKAGE_ID}::interface::${swapObject.functionName}`,\n      typeArguments: swapObject.typeArgs,\n      arguments: [\n        txb.object(objects.DEX_CORE_STORAGE),\n        txb.object(SUI_CLOCK_OBJECT_ID),\n        txb.makeMoveVec({\n          objects: coinInList,\n        }),\n        txb.pure(coinInAmount),\n        txb.pure(coinOutMinimumAmount),\n        txb.pure(nowTime + +deadline * 60 * 1000),\n      ],\n    });\n\n    return txb;\n  }\n\n  /**\n   * @description It returns the amount of the coinOutType from swapping the amount of coin type in\n   * @param coinInAmount The amount of the coin being sold\n   * @param coinInType The type of the coin being sold\n   * @param coinOutType The type of the coin being bought\n   * @param baseTokens An array of base coins to use for the one hop swap\n   * @param useCache It defaults to false. If it is false, we will first fetch the latest pools data. If not, we will use a cache.\n   * @param markets An object of Pools\n   */\n  public async quoteSwap({\n    coinInAmount,\n    coinInType,\n    coinOutType,\n    baseTokens,\n    useCache = false,\n    markets,\n  }: QuoteSwapArgs): Promise<QuoteSwapReturn | null> {\n    const objects = OBJECT_RECORD[this.network];\n\n    const allMarkets = findAllMarkets({\n      markets: markets\n        ? markets\n        : useCache\n        ? this.#POOLS\n        : await this.getLatestDEXMarkets(),\n      coinInType,\n      coinOutType,\n      baseTokens: baseTokens ? baseTokens : DEX_BASE_TOKEN_ARRAY[this.network],\n    });\n\n    if (!allMarkets.length) return null;\n\n    const promises = allMarkets.map(\n      ({ functionName, typeArgs, baseTokens }) => {\n        const txb = new TransactionBlock();\n\n        if (!baseTokens.length) {\n          txb.moveCall({\n            target: `${objects.DEX_QUOTE_PACKAGE_ID}::dex_quote::${DEX_FUNCTION_TO_GET_AMOUNT_FUNCTION_MAP[functionName]}`,\n            typeArguments: typeArgs,\n            arguments: [\n              txb.object(objects.DEX_CORE_STORAGE),\n              txb.pure(coinInAmount),\n            ],\n          });\n        } else {\n          // One-hop Swap\n          txb.moveCall({\n            target: `${objects.DEX_QUOTE_PACKAGE_ID}::dex_quote::${DEX_FUNCTION_TO_GET_AMOUNT_FUNCTION_MAP[functionName]}`,\n            typeArguments: typeArgs,\n            arguments: [\n              txb.object(objects.DEX_CORE_STORAGE),\n              txb.pure(coinInAmount),\n            ],\n          });\n        }\n\n        return this.provider.devInspectTransactionBlock({\n          transactionBlock: txb,\n          sender: ZERO_ADDRESS,\n        });\n      },\n    );\n\n    const responseArray = await Promise.all(promises);\n\n    return responseArray\n      .map(response => {\n        const resultArray = getReturnValuesFromInspectResults(response);\n\n        if (!resultArray || !resultArray.length) return '0';\n\n        const result = resultArray[0];\n\n        return bcs.de(result[1], Uint8Array.from(result[0])) as string;\n      })\n      .reduce(\n        (acc, amount, index) =>\n          BigInt(amount) > BigInt(acc.amount)\n            ? { swapObject: allMarkets[index], amount }\n            : acc,\n        { swapObject: {} as SwapPathObject, amount: '0' },\n      );\n  }\n\n  /**\n   * @description It allows a user to add liquidity to a pool. Please note that the coins do not need to be ordered\n   * @param txb The {TransactionBlock} class to chain\n   * @param stable it determines if the liquidity will be added to a stable or volatile pool\n   * @param coinAType The type of the first Coin Pair to be added\n   * @param coinBType The type of the second Coin Pair to be added\n   * @param coinAList An array of objects of coin0Type\n   * @param coinBList An array of objects of coin1Type\n   * @param coinAAmount The desired amount of coin0Type to add\n   * @param coinBAmount The desired amount of coin1Type to add\n   * @param lpCoinMinOut The minimum amount of LpCoins to receive from adding liquidity\n   */\n  public addLiquidity({\n    txb,\n    stable,\n    coinAType,\n    coinBType,\n    coinAList,\n    coinBList,\n    coinAAmount,\n    coinBAmount,\n    lpCoinMinOut = '0',\n  }: AddLiquidityArgs): TransactionBlock {\n    const objects = OBJECT_RECORD[this.network];\n\n    txb.moveCall({\n      target: `${objects.DEX_PACKAGE_ID}::interface::add_liquidity`,\n      typeArguments: [\n        stable ? STABLE[this.network] : VOLATILE[this.network],\n        coinAType,\n        coinBType,\n      ],\n      arguments: [\n        txb.object(objects.DEX_CORE_STORAGE),\n        txb.object(SUI_CLOCK_OBJECT_ID),\n        txb.makeMoveVec({\n          objects: coinAList,\n        }),\n        txb.makeMoveVec({\n          objects: coinBList,\n        }),\n        txb.pure(coinAAmount),\n        txb.pure(coinBAmount),\n        txb.pure(lpCoinMinOut),\n      ],\n    });\n\n    return txb;\n  }\n\n  /**\n   * @description It allows the caller to calculate how many LpCoins he will receive. The coins must be ordered.\n   * @param coin0Type The A type in Pool<A, B>\n   * @param coin1Type The B type in Pool<A, B>\n   * @param coin0Amount The amount of Coin<A> being deposited\n   * @param coin1Amount The amount of Coin<B> being deposited\n   * @param stable It indicates if the caller wishes to deposit in a Volatile or Stable Pool\n   */\n  public async quoteAddLiquidity({\n    coin0Type,\n    coin1Type,\n    coin0Amount,\n    coin1Amount,\n    stable,\n  }: QuoteAddLiquidityArgs): Promise<[string, string, string] | null> {\n    invariant(!isNaN(+coin0Amount), 'coin0Amount must be a number');\n    invariant(!isNaN(+coin1Amount), 'coin1Amount must be a number');\n    invariant(+coin0Amount > 0, 'You cannot add 0 amount of coin0Amount');\n    invariant(+coin1Amount > 0, 'You cannot add 0 amount of coin1Amount');\n\n    const objects = OBJECT_RECORD[this.network];\n\n    const txb = new TransactionBlock();\n\n    txb.moveCall({\n      target: `${objects.DEX_QUOTE_PACKAGE_ID}::dex_quote::quote_add_liquidity`,\n      typeArguments: [\n        stable ? STABLE[this.network] : VOLATILE[this.network],\n        coin0Type,\n        coin1Type,\n      ],\n      arguments: [\n        txb.object(objects.DEX_CORE_STORAGE),\n        txb.pure(coin0Amount),\n        txb.pure(coin1Amount),\n      ],\n    });\n\n    const response = await this.provider.devInspectTransactionBlock({\n      transactionBlock: txb,\n      sender: ZERO_ADDRESS,\n    });\n    const resultArray = getReturnValuesFromInspectResults(response);\n\n    if (!resultArray || !resultArray.length) return null;\n\n    const result = resultArray[0];\n    const result1 = resultArray[1];\n    const result2 = resultArray[2];\n\n    return [\n      bcs.de(result[1], Uint8Array.from(result[0])),\n      bcs.de(result1[1], Uint8Array.from(result1[0])),\n      bcs.de(result2[1], Uint8Array.from(result2[0])),\n    ] as [string, string, string];\n  }\n\n  /**\n   * @description It removes liquidity from a pool. Please note that the types do not need to be ordered.\n   * @param txb The {TransactionBlock} class to chain\n   * @param stable It indicates if the user wishes to remove from a stable or volatile pool\n   * @param coin0Type The first coin of the pool\n   * @param coinBType The second coin of the pool\n   * @param lpCoinList An array of lpCoin objects to be burned to remove the underlying\n   * @param lpCoinAmount The desired amount of LP amount to add\n   * @param coinAMinAmount The minimum amount of Coin<A> that the user wishes to receive\n   * @param coinBMinAmount The minimum amount of Coin<B> that the user wishes to receive\n   */\n  public removeLiquidity({\n    txb,\n    stable,\n    coinAType,\n    coinBType,\n    lpCoinList,\n    lpCoinAmount,\n    coinAMinAmount,\n    coinBMinAmount,\n  }: RemoveLiquidityArgs): TransactionBlock {\n    const objects = OBJECT_RECORD[this.network];\n\n    txb.moveCall({\n      target: `${objects.DEX_PACKAGE_ID}::interface::remove_liquidity`,\n      typeArguments: [\n        stable ? STABLE[this.network] : VOLATILE[this.network],\n        coinAType,\n        coinBType,\n      ],\n      arguments: [\n        txb.object(objects.DEX_CORE_STORAGE),\n        txb.object(SUI_CLOCK_OBJECT_ID),\n        txb.makeMoveVec({\n          objects: lpCoinList,\n        }),\n        txb.pure(lpCoinAmount),\n        txb.pure(coinAMinAmount),\n        txb.pure(coinBMinAmount),\n      ],\n    });\n\n    return txb;\n  }\n\n  /**\n   * @description It returns the amount of underlying Coins a user will receive by burning LPCoins. The coins must be ordered.\n   * @param coin0Type It represents one of the Coin types from a pool\n   * @param coin1Type It represents the other Coin type from a pool\n   * @param stable It indicates if it is withdrawing from a stable or volatile pool\n   * @param lpCoinAmount The minimum amount of Lp Coin objects of LPCoin<CoinAType, CoinBType> to receive\n   */\n  public async quoteRemoveLiquidity({\n    coin0Type,\n    coin1Type,\n    stable,\n    lpCoinAmount,\n  }: QuoteRemoveLiquidityArgs): Promise<null | [string, string]> {\n    invariant(!isNaN(+lpCoinAmount), 'lpCoinAmount must be a number');\n    invariant(+lpCoinAmount > 0, 'You cannot burn 0 amount of lpCoinAmount');\n\n    const txb = new TransactionBlock();\n\n    const objects = OBJECT_RECORD[this.network];\n\n    txb.moveCall({\n      target: `${objects.DEX_QUOTE_PACKAGE_ID}::dex_quote::quote_remove_liquidity`,\n      typeArguments: [\n        stable ? STABLE[this.network] : VOLATILE[this.network],\n        coin0Type,\n        coin1Type,\n      ],\n      arguments: [txb.object(objects.DEX_CORE_STORAGE), txb.pure(lpCoinAmount)],\n    });\n\n    const response = await this.provider.devInspectTransactionBlock({\n      transactionBlock: txb,\n      sender: ZERO_ADDRESS,\n    });\n\n    const resultArray = getReturnValuesFromInspectResults(response);\n\n    if (!resultArray || !resultArray.length) return null;\n\n    const result = resultArray[0];\n    const result1 = resultArray[1];\n\n    return [\n      bcs.de(result[1], Uint8Array.from(result[0])),\n      bcs.de(result1[1], Uint8Array.from(result1[0])),\n    ] as [string, string];\n  }\n\n  /**\n   * @description The coin types do not need to be ordered. The SDK does not know every single pool in the DEX\n   * @param coinAType\n   * @param coinBType\n   */\n  public getSortedPoolCoins(coinAType: string, coinBType: string) {\n    const poolType = pathOr(null, [coinAType, coinBType], this.#POOLS);\n    return poolType ? getCoinsFromPoolType(poolType) : null;\n  }\n\n  /**\n   * @description It returns the cached Markets [coinAType][coinBType] PoolType\n   */\n  public getCachedMarkets(): DexMarket {\n    return this.#POOLS;\n  }\n\n  /**\n   * @description It returns a pool object from a Pool Object Id\n   * @param poolObjectId The id of Pool object\n   */\n  public async getPool(poolObjectId: string): Promise<Pool> {\n    const data = await this.provider.getObject({\n      id: poolObjectId,\n      options: { showContent: true, showType: true },\n    });\n\n    return processPool(data);\n  }\n\n  public async getLatestDEXMarkets(): Promise<DexMarket> {\n    const objects = OBJECT_RECORD[this.network];\n\n    const poolsDataArray = await getAllDynamicFields(\n      this.provider,\n      objects.DEX_POOLS,\n    );\n\n    const markets = parseRawDEXMarkets(poolsDataArray);\n\n    this.#POOLS = markets;\n\n    return markets;\n  }\n}\n","import {\n  DevInspectResults,\n  JsonRpcProvider,\n  SuiObjectResponse,\n} from '@mysten/sui.js';\nimport {\n  DynamicFieldInfo,\n  DynamicFieldPage,\n} from '@mysten/sui.js/src/types/dynamic_fields';\nimport { head, isEmpty, pathOr, propOr } from 'ramda';\n\nimport { DEFAULT_POOL, DexFunctions, Pool } from '@/constants';\n\nimport { DEX_BASE_TOKEN_ARRAY } from './constants/coins';\nimport {\n  DexMarket,\n  FindAllMarkets,\n  FindMarketArgs,\n  GetAllDynamicFieldsInternalArgs,\n  SwapPathObject,\n} from './types';\n\nexport const getReturnValuesFromInspectResults = (\n  x: DevInspectResults,\n): Array<[number[], string]> | null => {\n  const results = propOr([], 'results', x) as DevInspectResults['results'];\n\n  if (!results?.length) return null;\n\n  const firstElem = head(results);\n\n  if (!firstElem) return null;\n\n  const returnValues = firstElem?.returnValues;\n\n  return returnValues ? returnValues : null;\n};\n\nexport const getCoinsFromPoolType = (poolType: string) => {\n  const type = poolType.split('Pool');\n  const poolArgs = type[1];\n  const tokens = poolArgs.split(',');\n  return {\n    coinXType: tokens[1].trim(),\n    coinYType: tokens[2].split('>')[0].trim(),\n  };\n};\n\nexport const addCoinTypeToTokenType = (x: string): string =>\n  `0x2::coin::Coin<${x}>`;\n\nexport const findAllMarkets = ({\n  markets,\n  coinInType,\n  coinOutType,\n  baseTokens,\n}: FindAllMarkets): ReadonlyArray<SwapPathObject> => {\n  if (isEmpty(markets)) return [];\n\n  const poolType = pathOr(\n    null,\n    [addCoinTypeToTokenType(coinInType), addCoinTypeToTokenType(coinOutType)],\n    markets,\n  );\n\n  const acc = [] as Array<SwapPathObject>;\n\n  // No Hop Swap X -> Y\n  if (poolType) {\n    const { coinXType, coinYType } = getCoinsFromPoolType(poolType);\n\n    acc.push({\n      baseTokens: [],\n      coinInType,\n      coinOutType,\n      functionName:\n        coinInType === coinXType ? DexFunctions.SwapX : DexFunctions.SwapY,\n      typeArgs: [coinXType, coinYType],\n    });\n  }\n\n  // One Hop Swap\n  return baseTokens.reduce((acc, element) => {\n    const firstPool = pathOr(\n      null,\n      [addCoinTypeToTokenType(coinInType), addCoinTypeToTokenType(element)],\n      markets,\n    );\n    const secondPool = pathOr(\n      null,\n      [addCoinTypeToTokenType(coinOutType), addCoinTypeToTokenType(element)],\n      markets,\n    );\n\n    if (firstPool && secondPool)\n      return acc.concat([\n        {\n          baseTokens: [element],\n          coinOutType,\n          coinInType,\n          functionName: DexFunctions.OneHopSwap,\n          typeArgs: [coinInType, element, coinOutType],\n        },\n      ]);\n\n    return acc;\n  }, acc);\n};\n\nexport const findMarket = ({\n  data,\n  network,\n  coinInType,\n  coinOutType,\n}: FindMarketArgs): ReadonlyArray<SwapPathObject> => {\n  if (isEmpty(data)) return [];\n\n  const poolType = pathOr(\n    null,\n    [addCoinTypeToTokenType(coinInType), addCoinTypeToTokenType(coinOutType)],\n    data,\n  );\n\n  // No Hop Swap X -> Y\n  if (poolType) {\n    const { coinXType, coinYType } = getCoinsFromPoolType(poolType);\n\n    return [\n      {\n        baseTokens: [],\n        coinInType,\n        coinOutType,\n        functionName:\n          coinInType === coinXType ? DexFunctions.SwapX : DexFunctions.SwapY,\n        typeArgs: [coinXType, coinYType],\n      },\n    ];\n  }\n\n  // One Hop Swap\n  return DEX_BASE_TOKEN_ARRAY[network].reduce(\n    (acc, element): ReadonlyArray<SwapPathObject> => {\n      const firstPool = pathOr(\n        null,\n        [addCoinTypeToTokenType(coinInType), addCoinTypeToTokenType(element)],\n        data,\n      );\n      const secondPool = pathOr(\n        null,\n        [addCoinTypeToTokenType(coinOutType), addCoinTypeToTokenType(element)],\n        data,\n      );\n\n      if (firstPool && secondPool)\n        return [\n          ...acc,\n          {\n            baseTokens: [element],\n            coinOutType,\n            coinInType,\n            functionName: DexFunctions.OneHopSwap,\n            typeArgs: [coinInType, element, coinOutType],\n          },\n        ];\n\n      return acc;\n    },\n    [] as ReadonlyArray<SwapPathObject>,\n  );\n};\n\nexport const parseRawDEXMarkets = (data: DynamicFieldInfo[]): DexMarket => {\n  if (!data) return {};\n\n  return data.reduce((acc, elem) => {\n    const { coinXType, coinYType } = getCoinsFromPoolType(elem.objectType);\n\n    const parsedTokenIn = addCoinTypeToTokenType(coinXType);\n    const parsedTokenOut = addCoinTypeToTokenType(coinYType);\n\n    if (!acc[parsedTokenIn]) acc[parsedTokenIn] = {};\n    if (!acc[parsedTokenOut]) acc[parsedTokenOut] = {};\n\n    return {\n      ...acc,\n      [parsedTokenIn]: {\n        ...acc[parsedTokenIn],\n        [parsedTokenOut]: elem.objectType,\n      },\n      [parsedTokenOut]: {\n        ...acc[parsedTokenOut],\n        [parsedTokenIn]: elem.objectType,\n      },\n    };\n  }, {} as DexMarket);\n};\n\nconst getAllDynamicFieldsInternal = async ({\n  data,\n  cursor,\n  parentId,\n  provider,\n}: GetAllDynamicFieldsInternalArgs): Promise<DynamicFieldPage['data']> => {\n  const newData = await provider.getDynamicFields({\n    parentId,\n    cursor: cursor,\n  });\n\n  const nextData = data.concat(newData.data);\n\n  if (!newData.hasNextPage) return nextData;\n\n  return getAllDynamicFieldsInternal({\n    data: nextData,\n    cursor: newData.nextCursor,\n    parentId,\n    provider,\n  });\n};\n\nexport const getAllDynamicFields = async (\n  provider: JsonRpcProvider,\n  parentId: string,\n) => {\n  const data = await provider.getDynamicFields({\n    parentId,\n  });\n\n  return data.hasNextPage\n    ? getAllDynamicFieldsInternal({\n        data: data.data,\n        cursor: data.nextCursor,\n        parentId,\n        provider,\n      })\n    : data.data;\n};\n\nexport const processPool = (data: undefined | SuiObjectResponse): Pool => {\n  if (!data) return DEFAULT_POOL;\n\n  const poolType: string = pathOr('', ['data', 'type'], data);\n\n  const stable = poolType.includes('Stable');\n\n  if (!poolType) return DEFAULT_POOL;\n  const { coinXType: token0Type, coinYType: token1Type } =\n    getCoinsFromPoolType(poolType);\n\n  return {\n    token0Balance: pathOr('', ['data', 'content', 'fields', 'balance_x'], data),\n    token1Balance: pathOr('', ['data', 'content', 'fields', 'balance_y'], data),\n    lpCoinSupply: pathOr(\n      '',\n      ['data', 'content', 'fields', 'lp_coin_supply', 'fields', 'value'],\n      data,\n    ),\n    lpCoin: pathOr(\n      '',\n      ['data', 'content', 'fields', 'lp_coin_supply', 'type'],\n      data,\n    ),\n    poolType,\n    token0Type,\n    token1Type,\n    stable,\n  };\n};\n"],"mappings":"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CE;AAAA,EACJ;AAAA,EACF,qGACE;AAAA,IACE,mGACE;AAAA,IACF,qGACE;AAAA,EACJ;AAAA,EACF,kCAAkC;AAAA,IAChC,mGACE;AAAA,EACJ;AAAA,EACA,mGACE;AAAA,IACE,mGACE;AAAA,EACJ;AAAA,EACF,mGACE;AAAA,IACE,mGACE;AAAA,EACJ;AAAA,EACF,iGACE;AAAA,IACE,mGACE;AAAA,EACJ;AAAA,EACF,qGACE;AAAA,IACE,qGACE;AAAA,IACF,mGACE;AAAA,EACJ;AACJ;AAEA,IAAM,iBAAiB;AAAA,EACrB,kCAAkC;AAAA,IAChC,yGACE;AAAA,IACF,mGACE;AAAA,IACF,mGACE;AAAA,IACF,+GACE;AAAA,IACF,mGACE;AAAA,IACF,mGACE;AAAA,IACF,mGACE;AAAA,IACF,mGACE;AAAA,IACF,mGACE;AAAA,IACF,mGACE;AAAA,IACF,6GACE;AAAA,IACF,yGACE;AAAA,IACF,mGACE;AAAA,IACF,wGACE;AAAA,IACF,uGACE;AAAA,IACF,mGACE;AAAA,IACF,mGACE;AAAA,IACF,mGACE;AAAA,IACF,qGACE;AAAA,IACF,2GACE;AAAA,IACF,mGACE;AAAA,IACF,uGACE;AAAA,IACF,mGACE;AAAA,IACF,yGACE;AAAA,IACF,mGACE;AAAA,IACF,mGACE;AAAA,IACF,mGACE;AAAA,IACF,yGACE;AAAA,IACF,mGACE;AAAA,IACF,mGACE;AAAA,IACF,yGACE;AAAA,EACJ;AAAA,EACA,yGACE;AAAA,IACE,kCACE;AAAA,EACJ;AAAA,EACF,mGACE;AAAA,IACE,kCACE;AAAA,EACJ;AAAA,EACF,mGACE;AAAA,IACE,kCACE;AAAA,EACJ;AAAA,EACF,mGACE;AAAA,IACE,mGACE;AAAA,IACF,mGACE;AAAA,IACF,kCACE;AAAA,EACJ;AAAA,EACF,mGACE;AAAA,IACE,mGACE;AAAA,IACF,kCACE;AAAA,EACJ;AAAA,EACF,+GACE;AAAA,IACE,kCACE;AAAA,EACJ;AAAA,EACF,mGACE;AAAA,IACE,kCACE;AAAA,EACJ;AAAA,EACF,mG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","names":["Network","DexFunctions","import_sui","import_ramda","acc","invariant","baseTokens"]}