"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};

// src/index.ts
var src_exports = {};
__export(src_exports, {
  COIN_TYPE: () => COIN_TYPE,
  DEFAULT_POOL: () => DEFAULT_POOL,
  DEX_BASE_TOKEN_ARRAY: () => DEX_BASE_TOKEN_ARRAY,
  DEX_FUNCTION_TO_GET_AMOUNT_FUNCTION_MAP: () => DEX_FUNCTION_TO_GET_AMOUNT_FUNCTION_MAP,
  DexFunctions: () => DexFunctions,
  MAINNET_BASE_COINS: () => MAINNET_BASE_COINS,
  Network: () => Network,
  OBJECT_RECORD: () => OBJECT_RECORD,
  POOLS: () => POOLS,
  SDK: () => SDK,
  STABLE: () => STABLE,
  VOLATILE: () => VOLATILE,
  ZERO_ADDRESS: () => ZERO_ADDRESS,
  addCoinTypeToTokenType: () => addCoinTypeToTokenType,
  findAllMarkets: () => findAllMarkets,
  findMarket: () => findMarket,
  getAllDynamicFields: () => getAllDynamicFields,
  getCoinsFromPoolType: () => getCoinsFromPoolType,
  getReturnValuesFromInspectResults: () => getReturnValuesFromInspectResults,
  parseRawDEXMarkets: () => parseRawDEXMarkets,
  processPool: () => processPool
});
module.exports = __toCommonJS(src_exports);

// src/constants/index.ts
var Network = /* @__PURE__ */ ((Network2) => {
  Network2["DEVNET"] = "sui:devnet";
  Network2["TESTNET"] = "sui:testnet";
  Network2["MAINNET"] = "sui:mainnet";
  return Network2;
})(Network || {});
var ZERO_ADDRESS = "0x0000000000000000000000000000000000000000000000000000000000000000";
var OBJECT_RECORD = {
  ["sui:devnet" /* DEVNET */]: {
    IPX_PACKAGE_ID: "0x7526f2ab7890276a8bdf4c3167683e2df079781fc3c3a6e1e0bdb95722014954",
    IPX_STORAGE: "0xa12806b9e0e9084e9fff6f91801a5d8fdc89429430eea5b144e5cc17cc460f77",
    DEX_PACKAGE_ID: "0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7",
    DEX_POOLS: "0x0f4d2db07a149879904bb6f745c3dbfe2b3ef5c496ee86f7d66f591f93efbf56",
    DEX_CORE_STORAGE: "0x92cd50d2735086963fa9c3dc0e7c7c3a294403fbc7d907066e0e1b0420031f46",
    DEX_MASTER_CHEF_STORAGE: "0x1c216dae931af6595ff8310364aa608a9f8156f875c918fb4945f8a2b7fa3463",
    DEX_MASTER_CHEF_ACCOUNT_STORAGE: "0x16bc6513fec89419eb1a35ab07a80eb50ccf5985edc096a3a82afb49e0c13e25",
    FAUCET_PACKAGE_ID: "0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47",
    FAUCET_BTC_STORAGE: "0xa485bbfe47077f1739970f8cd51af5485d108888f8b66d57e3c33ed679080a7c",
    FAUCET_ETH_STORAGE: "0x5e6e1dc724b631971a93825e6115cafd91bfcc4bd7bf6cfaff73c812656bb638",
    FAUCET_BNB_STORAGE: "0x7eed788550fd3edc957298a337eaf4b26ccbf3a977b2ff15781ef8dc72d7eb12",
    FAUCET_USDC_STORAGE: "0xb77710e571f53eb4dfa1fe5fb365505ecd560a484f57e6a8a55b1c4a84c9d3c4",
    FAUCET_USDT_STORAGE: "0xd4133d334c351611a05428b4b9b56a18abc67492dc5b7d5feae4a8ea6cf36d89",
    DEX_QUOTE_PACKAGE_ID: "0xfe3d9d1fbc06b915e9a546b9d38a3e622850fe77cb198f3d8f822f919365a8b9"
  },
  ["sui:testnet" /* TESTNET */]: {
    IPX_PACKAGE_ID: "0x57e5622e674c7fd98303516920ac4250a0667e486e3617f71c8b448f1b032aed",
    IPX_STORAGE: "0x4aebcc39ce03cab35c2ef3635aa68d99320f69febe0596e7d61695313f2190d6",
    DEX_PACKAGE_ID: "0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75",
    DEX_POOLS: "0x4637ab864aaee41bfa12f0ebf5588d1e91a753f43fe46303f6d93f57d151bd05",
    DEX_CORE_STORAGE: "0x065a58d3e0e41717c7d0b08d09928b2251d3f8f8b0d1479f092e15635969b8be",
    DEX_MASTER_CHEF_STORAGE: "0xefc82c6a4d8b6d1b2e6421fa7640e0befb14c8f7e862360b948cbff0fbd5fba3",
    DEX_MASTER_CHEF_ACCOUNT_STORAGE: "0xdf5cef4c924f0cbd874ff12a2a7aa32673c9f80722fd781cc66fab11bdf155eb",
    FAUCET_PACKAGE_ID: "0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0",
    FAUCET_BTC_STORAGE: "0xdec9b16bb03b140e3102042ad502e1debbe7d91fd347e0110d7ed72d269da0ae",
    FAUCET_ETH_STORAGE: "0x42ff0f1c48ed73b238e32d29552157f7d4961c52ca5175ceeef6301425d8dcf8",
    FAUCET_BNB_STORAGE: "0x15b454ee4546ddb49ef42e67167f71fac8406961a51dc28529e235669a7d136c",
    FAUCET_USDC_STORAGE: "0xa08c1f969d36beba75637f771f89943856f69cef8be540a867e80ec6047ded1e",
    FAUCET_USDT_STORAGE: "0xf80e06b35dad3ba0094db29ae89488b81a68e1e9746fad5c98c3dc67c4a0827c",
    DEX_QUOTE_PACKAGE_ID: "0xfe3d9d1fbc06b915e9a546b9d38a3e622850fe77cb198f3d8f822f919365a8b9"
  },
  ["sui:mainnet" /* MAINNET */]: {
    IPX_PACKAGE_ID: "0x49d87b9af35c4fef28def2cd65884aa9c49bb4eedbcee647f4dafb5c8f36ba57",
    IPX_STORAGE: "0xd3c1e174400409c2613559f0309d82fb2a97a1bbc77d6ea39aa1e11f4f6d67d1",
    DEX_PACKAGE_ID: "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0",
    DEX_POOLS: "0x108779144605a44e4b5447118b711f0b17adf6168cc9b08551d33daca58098e3",
    DEX_CORE_STORAGE: "0xdf2ee39f28fdf4bc5d5b5dc89926ac121839f8594fa51b2383a14cb99ab25a77",
    DEX_MASTER_CHEF_STORAGE: "0xbf3574ae177272809a7ee8f16c68db8fb832d4b10cb5febc477f90baba5ab6dd",
    DEX_MASTER_CHEF_ACCOUNT_STORAGE: "0x23fd9726a20709b6f3a59ba676a1d7bfede607ebeb011f888bb33de4f8f44e32",
    // THERE IS NO FAUCET ON MAINNET
    FAUCET_PACKAGE_ID: "0x0000000000000000000000000000000000000000000000000000000000000000",
    FAUCET_BTC_STORAGE: "0x0000000000000000000000000000000000000000000000000000000000000000",
    FAUCET_ETH_STORAGE: "0x0000000000000000000000000000000000000000000000000000000000000000",
    FAUCET_BNB_STORAGE: "0x0000000000000000000000000000000000000000000000000000000000000000",
    FAUCET_USDC_STORAGE: "0x0000000000000000000000000000000000000000000000000000000000000000",
    FAUCET_USDT_STORAGE: "0x0000000000000000000000000000000000000000000000000000000000000000",
    DEX_QUOTE_PACKAGE_ID: "0xd3f17406b17aa93f634e486a76938532e49f04345e59c3d250c9ebce79a0263f"
  }
};
var DexFunctions = /* @__PURE__ */ ((DexFunctions2) => {
  DexFunctions2["SwapX"] = "swap_x";
  DexFunctions2["SwapY"] = "swap_y";
  DexFunctions2["OneHopSwap"] = "one_hop_swap";
  DexFunctions2["TwoHopSwap"] = "two_hop_swap";
  return DexFunctions2;
})(DexFunctions || {});
var DEX_FUNCTION_TO_GET_AMOUNT_FUNCTION_MAP = {
  ["swap_x" /* SwapX */]: "quote_swap_x",
  ["swap_y" /* SwapY */]: "quote_swap_y",
  ["one_hop_swap" /* OneHopSwap */]: "quote_one_hop_swap",
  ["two_hop_swap" /* TwoHopSwap */]: "quote_two_hop_swap"
};
var DEFAULT_POOL = {
  token0Balance: "0",
  token1Balance: "0",
  lpCoinSupply: "0",
  lpCoin: "",
  poolType: "",
  token0Type: "",
  token1Type: "",
  stable: false
};

// src/constants/coins.ts
var import_sui = require("@mysten/sui.js");
var VOLATILE = {
  ["sui:devnet" /* DEVNET */]: `${OBJECT_RECORD["sui:devnet" /* DEVNET */].DEX_PACKAGE_ID}::curve::Volatile`,
  ["sui:testnet" /* TESTNET */]: `${OBJECT_RECORD["sui:testnet" /* TESTNET */].DEX_PACKAGE_ID}::curve::Volatile`,
  ["sui:mainnet" /* MAINNET */]: `${OBJECT_RECORD["sui:mainnet" /* MAINNET */].DEX_PACKAGE_ID}::curve::Volatile`
};
var STABLE = {
  ["sui:devnet" /* DEVNET */]: `${OBJECT_RECORD["sui:devnet" /* DEVNET */].DEX_PACKAGE_ID}::curve::Stable`,
  ["sui:testnet" /* TESTNET */]: `${OBJECT_RECORD["sui:testnet" /* TESTNET */].DEX_PACKAGE_ID}::curve::Stable`,
  ["sui:mainnet" /* MAINNET */]: `${OBJECT_RECORD["sui:mainnet" /* MAINNET */].DEX_PACKAGE_ID}::curve::Stable`
};
var DEV_NET_BASE_COINS = {
  SUI: import_sui.SUI_TYPE_ARG,
  BNB: `${OBJECT_RECORD["sui:devnet" /* DEVNET */].FAUCET_PACKAGE_ID}::ibnb::IBNB`,
  ETH: `${OBJECT_RECORD["sui:devnet" /* DEVNET */].FAUCET_PACKAGE_ID}::ieth::IETH`,
  BTC: `${OBJECT_RECORD["sui:devnet" /* DEVNET */].FAUCET_PACKAGE_ID}::ibtc::IBTC`,
  USDT: `${OBJECT_RECORD["sui:devnet" /* DEVNET */].FAUCET_PACKAGE_ID}::iusdt::IUSDT`,
  USDC: `${OBJECT_RECORD["sui:devnet" /* DEVNET */].FAUCET_PACKAGE_ID}::iusdc::IUSDC`,
  IPX: `${OBJECT_RECORD["sui:devnet" /* DEVNET */].IPX_PACKAGE_ID}::ipx::IPX`
};
var TESTNET_NET_BASE_COINS = {
  SUI: import_sui.SUI_TYPE_ARG,
  BNB: `${OBJECT_RECORD["sui:testnet" /* TESTNET */].FAUCET_PACKAGE_ID}::ibnb::IBNB`,
  ETH: `${OBJECT_RECORD["sui:testnet" /* TESTNET */].FAUCET_PACKAGE_ID}::ieth::IETH`,
  BTC: `${OBJECT_RECORD["sui:testnet" /* TESTNET */].FAUCET_PACKAGE_ID}::ibtc::IBTC`,
  USDT: `${OBJECT_RECORD["sui:testnet" /* TESTNET */].FAUCET_PACKAGE_ID}::iusdt::IUSDT`,
  USDC: `${OBJECT_RECORD["sui:testnet" /* TESTNET */].FAUCET_PACKAGE_ID}::iusdc::IUSDC`,
  IPX: `${OBJECT_RECORD["sui:testnet" /* TESTNET */].IPX_PACKAGE_ID}::ipx::IPX`
};
var MAINNET_BASE_COINS = {
  SUI: import_sui.SUI_TYPE_ARG,
  ETH_WORMHOLE_USDC: "0x5d4b302506645c37ff133b98c4b50a5ae14841659738d6d733d59d0d217a93bf::coin::COIN",
  NATIVE_WORMHOLE_ETH: "0xaf8cd5edc19c4512f4259f0bee101a40d41ebed738ade5874359610ef8eeced5::coin::COIN",
  ETH_WORMHOLE_USDT: "0xc060006111016b8a020ad5b33834984a437aaa7d3c74c18e09a95d48aceab08c::coin::COIN",
  NATIVE_WORMHOLE_WBNB: "0xb848cce11ef3a8f62eccea6eb5b35a12c4c2b1ee1af7755d02d7bd6218e8226f::coin::COIN",
  NATIVE_WORMHOLE_WAVAX: "0x1e8b532cca6569cab9f9b9ebc73f8c13885012ade714729aa3b450e0339ac766::coin::COIN",
  NATIVE_WORMHOLE_WFTM: "0x6081300950a4f1e2081580e919c210436a1bed49080502834950d31ee55a2396::coin::COIN",
  NATIVE_WORMHOLE_CELO: "0xa198f3be41cda8c07b3bf3fee02263526e535d682499806979a111e88a5a8d0f::coin::COIN",
  NATIVE_WORMHOLE_WMATIC: "0xdbe380b13a6d0f5cdedd58de8f04625263f113b3f9db32b3e1983f49e2841676::coin::COIN",
  NATIVE_WORMHOLE_SOL: "0xb7844e289a8410e50fb3ca48d69eb9cf29e27d223ef90353fe1bd8e27ff8f3f8::coin::COIN",
  BSC_WORMHOLE_ADA: "0x4eac6573f65e7db5aea5a23e1335993a57e088dcd4aff7934059d9a6311d8655::coin::COIN",
  BSC_WORMHOLE_BTCB: "0x5cc7b6ed0ce0d43d08667793f6efe7a34d678a780755dc37ea8bfa8805f63327::coin::COIN",
  BSC_WORMHOLE_USDT: "0x603b488c87e0d1df64560a61418c87238d440a29ee39bbd757b0c92d38a35c7c::coin::COIN",
  BSC_WORMHOLE_USDC: "0x909cba62ce96d54de25bec9502de5ca7b4f28901747bbf96b76c2e63ec5f1cba::coin::COIN",
  BSC_WORMHOLE_ETH: "0x5029d5a94429a73b8036cd67192d9c5e09bbc2c0fee942d50075a9edba66744f::coin::COIN",
  BSC_WORMHOLE_FLOKI: "0xbcbbd5c23edf35fc279e21ebc129a1187dbfa5b086c63a8e7ff202865888b27b::coin::COIN",
  BSC_WORMHOLE_DOGE: "0xd399b358bd0e835000f6caa8c771a7d186499b6e62d413c2fd6cfed709689f28::coin::COIN"
};
var COIN_TYPE = {
  ["sui:devnet" /* DEVNET */]: {
    ...DEV_NET_BASE_COINS,
    V_LP_SUI_ETH: `${OBJECT_RECORD["sui:devnet" /* DEVNET */].DEX_PACKAGE_ID}::core::LPCoin<${VOLATILE["sui:devnet" /* DEVNET */]}, ${DEV_NET_BASE_COINS.SUI}, ${DEV_NET_BASE_COINS.ETH}>`,
    V_LP_BTC_ETH: `${OBJECT_RECORD["sui:devnet" /* DEVNET */].DEX_PACKAGE_ID}::core::LPCoin<${VOLATILE["sui:devnet" /* DEVNET */]}, ${DEV_NET_BASE_COINS.BTC}, ${DEV_NET_BASE_COINS.ETH}>`,
    V_LP_BNB_ETH: `${OBJECT_RECORD["sui:devnet" /* DEVNET */].DEX_PACKAGE_ID}::core::LPCoin<${VOLATILE["sui:devnet" /* DEVNET */]}, ${DEV_NET_BASE_COINS.BNB}, ${DEV_NET_BASE_COINS.ETH}>`,
    V_LP_ETH_USDT: `${OBJECT_RECORD["sui:devnet" /* DEVNET */].DEX_PACKAGE_ID}::core::LPCoin<${VOLATILE["sui:devnet" /* DEVNET */]}, ${DEV_NET_BASE_COINS.ETH}, ${DEV_NET_BASE_COINS.USDT}>`,
    V_LP_ETH_USDC: `${OBJECT_RECORD["sui:devnet" /* DEVNET */].DEX_PACKAGE_ID}::core::LPCoin<${VOLATILE["sui:devnet" /* DEVNET */]}, ${DEV_NET_BASE_COINS.ETH}, ${DEV_NET_BASE_COINS.USDC}>`,
    V_LP_ETH_IPX: `${OBJECT_RECORD["sui:devnet" /* DEVNET */].DEX_PACKAGE_ID}::core::LPCoin<${VOLATILE["sui:devnet" /* DEVNET */]}, ${DEV_NET_BASE_COINS.ETH}, ${DEV_NET_BASE_COINS.IPX}>`,
    S_LP_USDC_USDT: `${OBJECT_RECORD["sui:devnet" /* DEVNET */].DEX_PACKAGE_ID}::core::LPCoin<${STABLE["sui:devnet" /* DEVNET */]}, ${DEV_NET_BASE_COINS.USDC}, ${DEV_NET_BASE_COINS.USDT}>`
  },
  ["sui:testnet" /* TESTNET */]: {
    ...TESTNET_NET_BASE_COINS,
    V_LP_SUI_ETH: `${OBJECT_RECORD["sui:testnet" /* TESTNET */].DEX_PACKAGE_ID}::core::LPCoin<${VOLATILE["sui:testnet" /* TESTNET */]}, ${TESTNET_NET_BASE_COINS.SUI}, ${TESTNET_NET_BASE_COINS.ETH}>`,
    V_LP_BTC_ETH: `${OBJECT_RECORD["sui:testnet" /* TESTNET */].DEX_PACKAGE_ID}::core::LPCoin<${VOLATILE["sui:testnet" /* TESTNET */]}, ${TESTNET_NET_BASE_COINS.BTC}, ${TESTNET_NET_BASE_COINS.ETH}>`,
    V_LP_BNB_ETH: `${OBJECT_RECORD["sui:testnet" /* TESTNET */].DEX_PACKAGE_ID}::core::LPCoin<${VOLATILE["sui:testnet" /* TESTNET */]}, ${TESTNET_NET_BASE_COINS.BNB}, ${TESTNET_NET_BASE_COINS.ETH}>`,
    V_LP_ETH_USDT: `${OBJECT_RECORD["sui:testnet" /* TESTNET */].DEX_PACKAGE_ID}::core::LPCoin<${VOLATILE["sui:testnet" /* TESTNET */]}, ${TESTNET_NET_BASE_COINS.ETH}, ${TESTNET_NET_BASE_COINS.USDT}>`,
    V_LP_ETH_USDC: `${OBJECT_RECORD["sui:testnet" /* TESTNET */].DEX_PACKAGE_ID}::core::LPCoin<${VOLATILE["sui:testnet" /* TESTNET */]}, ${TESTNET_NET_BASE_COINS.ETH}, ${TESTNET_NET_BASE_COINS.USDC}>`,
    V_LP_ETH_IPX: `${OBJECT_RECORD["sui:testnet" /* TESTNET */].DEX_PACKAGE_ID}::core::LPCoin<${VOLATILE["sui:testnet" /* TESTNET */]}, ${TESTNET_NET_BASE_COINS.IPX}, ${TESTNET_NET_BASE_COINS.ETH}>`,
    S_LP_USDC_USDT: `${OBJECT_RECORD["sui:testnet" /* TESTNET */].DEX_PACKAGE_ID}::core::LPCoin<${STABLE["sui:testnet" /* TESTNET */]}, ${TESTNET_NET_BASE_COINS.USDC}, ${TESTNET_NET_BASE_COINS.USDT}>`
  },
  ["sui:mainnet" /* MAINNET */]: {
    ...MAINNET_BASE_COINS,
    S_LP_ETH_WORMHOLE_USDC_ETH_WORMHOLE_USDT: `${OBJECT_RECORD["sui:mainnet" /* MAINNET */].DEX_PACKAGE_ID}::core::LPCoin<${STABLE["sui:mainnet" /* MAINNET */]}, ${MAINNET_BASE_COINS.ETH_WORMHOLE_USDC}, ${MAINNET_BASE_COINS.ETH_WORMHOLE_USDT}>`,
    V_LP_SUI_NATIVE_WORMHOLE_ETH: `${OBJECT_RECORD["sui:mainnet" /* MAINNET */].DEX_PACKAGE_ID}::core::LPCoin<${VOLATILE["sui:mainnet" /* MAINNET */]}, ${MAINNET_BASE_COINS.SUI}, ${MAINNET_BASE_COINS.NATIVE_WORMHOLE_ETH}>`,
    V_LP_SUI_ETH_WORMHOLE_USDT: `${OBJECT_RECORD["sui:mainnet" /* MAINNET */].DEX_PACKAGE_ID}::core::LPCoin<${VOLATILE["sui:mainnet" /* MAINNET */]}, ${MAINNET_BASE_COINS.SUI}, ${MAINNET_BASE_COINS.ETH_WORMHOLE_USDT}>`,
    V_LP_SUI_ETH_WORMHOLE_USDC: `${OBJECT_RECORD["sui:mainnet" /* MAINNET */].DEX_PACKAGE_ID}::core::LPCoin<${VOLATILE["sui:mainnet" /* MAINNET */]}, ${MAINNET_BASE_COINS.SUI}, ${MAINNET_BASE_COINS.ETH_WORMHOLE_USDC}>`,
    V_LP_SUI_NATIVE_WORMHOLE_WBNB: `${OBJECT_RECORD["sui:mainnet" /* MAINNET */].DEX_PACKAGE_ID}::core::LPCoin<${VOLATILE["sui:mainnet" /* MAINNET */]}, ${MAINNET_BASE_COINS.SUI}, ${MAINNET_BASE_COINS.NATIVE_WORMHOLE_WBNB}>`,
    V_LP_SUI_NATIVE_WORMHOLE_WMATIC: `${OBJECT_RECORD["sui:mainnet" /* MAINNET */].DEX_PACKAGE_ID}::core::LPCoin<${VOLATILE["sui:mainnet" /* MAINNET */]}, ${MAINNET_BASE_COINS.SUI}, ${MAINNET_BASE_COINS.NATIVE_WORMHOLE_WMATIC}>`,
    V_LP_SUI_NATIVE_WORMHOLE_WFTM: `${OBJECT_RECORD["sui:mainnet" /* MAINNET */].DEX_PACKAGE_ID}::core::LPCoin<${VOLATILE["sui:mainnet" /* MAINNET */]}, ${MAINNET_BASE_COINS.SUI}, ${MAINNET_BASE_COINS.NATIVE_WORMHOLE_WFTM}>`,
    V_LP_SUI_NATIVE_WORMHOLE_CELO: `${OBJECT_RECORD["sui:mainnet" /* MAINNET */].DEX_PACKAGE_ID}::core::LPCoin<${VOLATILE["sui:mainnet" /* MAINNET */]}, ${MAINNET_BASE_COINS.SUI}, ${MAINNET_BASE_COINS.NATIVE_WORMHOLE_CELO}>`,
    V_LP_SUI_NATIVE_WORMHOLE_WAVAX: `${OBJECT_RECORD["sui:mainnet" /* MAINNET */].DEX_PACKAGE_ID}::core::LPCoin<${VOLATILE["sui:mainnet" /* MAINNET */]}, ${MAINNET_BASE_COINS.SUI}, ${MAINNET_BASE_COINS.NATIVE_WORMHOLE_WAVAX}>`,
    V_LP_SUI_BSC_WORMHOLE_ADA: `${OBJECT_RECORD["sui:mainnet" /* MAINNET */].DEX_PACKAGE_ID}::core::LPCoin<${VOLATILE["sui:mainnet" /* MAINNET */]}, ${MAINNET_BASE_COINS.SUI}, ${MAINNET_BASE_COINS.BSC_WORMHOLE_ADA}>`,
    V_LP_SUI_BSC_WORMHOLE_BTCB: `${OBJECT_RECORD["sui:mainnet" /* MAINNET */].DEX_PACKAGE_ID}::core::LPCoin<${VOLATILE["sui:mainnet" /* MAINNET */]}, ${MAINNET_BASE_COINS.SUI}, ${MAINNET_BASE_COINS.BSC_WORMHOLE_BTCB}>`,
    V_LP_SUI_BSC_WORMHOLE_USDT: `${OBJECT_RECORD["sui:mainnet" /* MAINNET */].DEX_PACKAGE_ID}::core::LPCoin<${VOLATILE["sui:mainnet" /* MAINNET */]}, ${MAINNET_BASE_COINS.SUI}, ${MAINNET_BASE_COINS.BSC_WORMHOLE_USDT}>`,
    S_LP_BSC_WORMHOLE_USDT_BSC_WORMHOLE_USDC: `${OBJECT_RECORD["sui:mainnet" /* MAINNET */].DEX_PACKAGE_ID}::core::LPCoin<${STABLE["sui:mainnet" /* MAINNET */]}, ${MAINNET_BASE_COINS.BSC_WORMHOLE_USDT}, ${MAINNET_BASE_COINS.BSC_WORMHOLE_USDC}>`,
    V_LP_SUI_BSC_WORMHOLE_USDC: `${OBJECT_RECORD["sui:mainnet" /* MAINNET */].DEX_PACKAGE_ID}::core::LPCoin<${VOLATILE["sui:mainnet" /* MAINNET */]}, ${MAINNET_BASE_COINS.SUI}, ${MAINNET_BASE_COINS.BSC_WORMHOLE_USDC}>`,
    S_LP_ETH_WORMHOLE_USDC_BSC_WORMHOLE_USDC: `${OBJECT_RECORD["sui:mainnet" /* MAINNET */].DEX_PACKAGE_ID}::core::LPCoin<${STABLE["sui:mainnet" /* MAINNET */]}, ${MAINNET_BASE_COINS.ETH_WORMHOLE_USDC}, ${MAINNET_BASE_COINS.BSC_WORMHOLE_USDC}>`,
    V_LP_SUI_BSC_WORMHOLE_FLOKI: `${OBJECT_RECORD["sui:mainnet" /* MAINNET */].DEX_PACKAGE_ID}::core::LPCoin<${VOLATILE["sui:mainnet" /* MAINNET */]}, ${MAINNET_BASE_COINS.SUI}, ${MAINNET_BASE_COINS.BSC_WORMHOLE_FLOKI}>`,
    V_LP_SUI_BSC_WORMHOLE_DOGE: `${OBJECT_RECORD["sui:mainnet" /* MAINNET */].DEX_PACKAGE_ID}::core::LPCoin<${VOLATILE["sui:mainnet" /* MAINNET */]}, ${MAINNET_BASE_COINS.SUI}, ${MAINNET_BASE_COINS.BSC_WORMHOLE_DOGE}>`,
    V_LP_SUI_BSC_WORMHOLE_ETH: `${OBJECT_RECORD["sui:mainnet" /* MAINNET */].DEX_PACKAGE_ID}::core::LPCoin<${VOLATILE["sui:mainnet" /* MAINNET */]}, ${MAINNET_BASE_COINS.SUI}, ${MAINNET_BASE_COINS.BSC_WORMHOLE_ETH}>`,
    V_LP_SUI_NATIVE_WORMHOLE_SOL: `${OBJECT_RECORD["sui:mainnet" /* MAINNET */].DEX_PACKAGE_ID}::core::LPCoin<${VOLATILE["sui:mainnet" /* MAINNET */]}, ${MAINNET_BASE_COINS.SUI}, ${MAINNET_BASE_COINS.NATIVE_WORMHOLE_SOL}>`
  }
};
var DEX_BASE_TOKEN_ARRAY = {
  ["sui:devnet" /* DEVNET */]: [COIN_TYPE["sui:devnet" /* DEVNET */].ETH],
  ["sui:testnet" /* TESTNET */]: [COIN_TYPE["sui:testnet" /* TESTNET */].ETH],
  ["sui:mainnet" /* MAINNET */]: [
    COIN_TYPE["sui:mainnet" /* MAINNET */].SUI,
    COIN_TYPE["sui:mainnet" /* MAINNET */].ETH_WORMHOLE_USDC,
    COIN_TYPE["sui:mainnet" /* MAINNET */].BSC_WORMHOLE_USDC
  ]
};

// src/constants/pools.ts
var TEST_NET_POOLS = {
  "0x2::coin::Coin<0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ibtc::IBTC>": {
    "0x2::coin::Coin<0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH>": "0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::core::Pool<0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::curve::Volatile, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ibtc::IBTC, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH>"
  },
  "0x2::coin::Coin<0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH>": {
    "0x2::coin::Coin<0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ibtc::IBTC>": "0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::core::Pool<0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::curve::Volatile, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ibtc::IBTC, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH>",
    "0x2::coin::Coin<0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::iusdc::IUSDC>": "0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::core::Pool<0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::curve::Volatile, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::iusdc::IUSDC>",
    "0x2::coin::Coin<0x67bf2ef7d1947285b05566a6e46ca82708e0383556345e52c43bb56b8138410a::xvs::XVS>": "0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::core::Pool<0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::curve::Volatile, 0x67bf2ef7d1947285b05566a6e46ca82708e0383556345e52c43bb56b8138410a::xvs::XVS, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH>",
    "0x2::coin::Coin<0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::iusdt::IUSDT>": "0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::core::Pool<0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::curve::Volatile, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::iusdt::IUSDT>",
    "0x2::coin::Coin<0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ibnb::IBNB>": "0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::core::Pool<0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::curve::Volatile, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ibnb::IBNB, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH>",
    "0x2::coin::Coin<0x57e5622e674c7fd98303516920ac4250a0667e486e3617f71c8b448f1b032aed::ipx::IPX>": "0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::core::Pool<0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::curve::Volatile, 0x57e5622e674c7fd98303516920ac4250a0667e486e3617f71c8b448f1b032aed::ipx::IPX, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH>",
    "0x2::coin::Coin<0x2::sui::SUI>": "0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::core::Pool<0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::curve::Volatile, 0x2::sui::SUI, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH>"
  },
  "0x2::coin::Coin<0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::iusdc::IUSDC>": {
    "0x2::coin::Coin<0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH>": "0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::core::Pool<0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::curve::Volatile, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::iusdc::IUSDC>",
    "0x2::coin::Coin<0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::iusdt::IUSDT>": "0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::core::Pool<0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::curve::Stable, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::iusdc::IUSDC, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::iusdt::IUSDT>"
  },
  "0x2::coin::Coin<0x67bf2ef7d1947285b05566a6e46ca82708e0383556345e52c43bb56b8138410a::xvs::XVS>": {
    "0x2::coin::Coin<0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH>": "0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::core::Pool<0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::curve::Volatile, 0x67bf2ef7d1947285b05566a6e46ca82708e0383556345e52c43bb56b8138410a::xvs::XVS, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH>"
  },
  "0x2::coin::Coin<0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::iusdt::IUSDT>": {
    "0x2::coin::Coin<0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH>": "0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::core::Pool<0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::curve::Volatile, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::iusdt::IUSDT>",
    "0x2::coin::Coin<0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::iusdc::IUSDC>": "0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::core::Pool<0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::curve::Stable, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::iusdc::IUSDC, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::iusdt::IUSDT>"
  },
  "0x2::coin::Coin<0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ibnb::IBNB>": {
    "0x2::coin::Coin<0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH>": "0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::core::Pool<0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::curve::Volatile, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ibnb::IBNB, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH>"
  },
  "0x2::coin::Coin<0x57e5622e674c7fd98303516920ac4250a0667e486e3617f71c8b448f1b032aed::ipx::IPX>": {
    "0x2::coin::Coin<0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH>": "0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::core::Pool<0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::curve::Volatile, 0x57e5622e674c7fd98303516920ac4250a0667e486e3617f71c8b448f1b032aed::ipx::IPX, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH>"
  },
  "0x2::coin::Coin<0x2::sui::SUI>": {
    "0x2::coin::Coin<0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH>": "0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::core::Pool<0xd15fcc9307dcf822a6ec40950b8b8331ae2367c4455c568296ed4e1eb8527a75::curve::Volatile, 0x2::sui::SUI, 0xb8656a09a489819f07c444cb4a4a61a3b482a5ea994fd71b0a643ffc1c2f2dd0::ieth::IETH>"
  }
};
var DEV_NET_POOLS = {
  "0x2::coin::Coin<0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH>": {
    "0x2::coin::Coin<0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::iusdc::IUSDC>": "0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::core::Pool<0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::curve::Volatile, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::iusdc::IUSDC>",
    "0x2::coin::Coin<0x2::sui::SUI>": "0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::core::Pool<0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::curve::Volatile, 0x2::sui::SUI, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH>",
    "0x2::coin::Coin<0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ibtc::IBTC>": "0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::core::Pool<0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::curve::Volatile, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ibtc::IBTC, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH>",
    "0x2::coin::Coin<0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ibnb::IBNB>": "0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::core::Pool<0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::curve::Volatile, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ibnb::IBNB, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH>",
    "0x2::coin::Coin<0x7526f2ab7890276a8bdf4c3167683e2df079781fc3c3a6e1e0bdb95722014954::ipx::IPX>": "0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::core::Pool<0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::curve::Volatile, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH, 0x7526f2ab7890276a8bdf4c3167683e2df079781fc3c3a6e1e0bdb95722014954::ipx::IPX>",
    "0x2::coin::Coin<0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::iusdt::IUSDT>": "0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::core::Pool<0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::curve::Volatile, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::iusdt::IUSDT>"
  },
  "0x2::coin::Coin<0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::iusdc::IUSDC>": {
    "0x2::coin::Coin<0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH>": "0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::core::Pool<0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::curve::Volatile, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::iusdc::IUSDC>",
    "0x2::coin::Coin<0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::iusdt::IUSDT>": "0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::core::Pool<0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::curve::Stable, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::iusdc::IUSDC, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::iusdt::IUSDT>"
  },
  "0x2::coin::Coin<0x2::sui::SUI>": {
    "0x2::coin::Coin<0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH>": "0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::core::Pool<0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::curve::Volatile, 0x2::sui::SUI, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH>"
  },
  "0x2::coin::Coin<0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ibtc::IBTC>": {
    "0x2::coin::Coin<0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH>": "0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::core::Pool<0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::curve::Volatile, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ibtc::IBTC, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH>"
  },
  "0x2::coin::Coin<0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ibnb::IBNB>": {
    "0x2::coin::Coin<0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH>": "0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::core::Pool<0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::curve::Volatile, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ibnb::IBNB, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH>"
  },
  "0x2::coin::Coin<0x7526f2ab7890276a8bdf4c3167683e2df079781fc3c3a6e1e0bdb95722014954::ipx::IPX>": {
    "0x2::coin::Coin<0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH>": "0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::core::Pool<0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::curve::Volatile, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH, 0x7526f2ab7890276a8bdf4c3167683e2df079781fc3c3a6e1e0bdb95722014954::ipx::IPX>"
  },
  "0x2::coin::Coin<0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::iusdt::IUSDT>": {
    "0x2::coin::Coin<0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::iusdc::IUSDC>": "0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::core::Pool<0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::curve::Stable, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::iusdc::IUSDC, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::iusdt::IUSDT>",
    "0x2::coin::Coin<0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH>": "0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::core::Pool<0x1cab93480403e420a84c96340d8917810e8736e1f2348202a58ee3b3ae022ae7::curve::Volatile, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::ieth::IETH, 0x3821e4ae13d37a1c55a03a86eab613450c1302e6b4df461e1c79bdf8381dde47::iusdt::IUSDT>"
  }
};
var MAIN_NET_POOLS = {
  "0x2::coin::Coin<0x2::sui::SUI>": {
    "0x2::coin::Coin<0x361fcb86803eea2403007250638f3c8427249168ac77fee74b7129bdc05b2586::aifrens::AIFRENS>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x361fcb86803eea2403007250638f3c8427249168ac77fee74b7129bdc05b2586::aifrens::AIFRENS>",
    "0x2::coin::Coin<0xb848cce11ef3a8f62eccea6eb5b35a12c4c2b1ee1af7755d02d7bd6218e8226f::coin::COIN>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xb848cce11ef3a8f62eccea6eb5b35a12c4c2b1ee1af7755d02d7bd6218e8226f::coin::COIN>",
    "0x2::coin::Coin<0xa198f3be41cda8c07b3bf3fee02263526e535d682499806979a111e88a5a8d0f::coin::COIN>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xa198f3be41cda8c07b3bf3fee02263526e535d682499806979a111e88a5a8d0f::coin::COIN>",
    "0x2::coin::Coin<0xbde18964049a1226f6e30dd2058ac03205d3d7c6f7a3062760a70e20a4b49d1c::wojak_coin::WOJAK_COIN>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xbde18964049a1226f6e30dd2058ac03205d3d7c6f7a3062760a70e20a4b49d1c::wojak_coin::WOJAK_COIN>",
    "0x2::coin::Coin<0xd735282698c3093adf91c59ba5fa3294112d7dd713beb4f7753eac4637bd47a1::bark::BARK>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xd735282698c3093adf91c59ba5fa3294112d7dd713beb4f7753eac4637bd47a1::bark::BARK>",
    "0x2::coin::Coin<0xd399b358bd0e835000f6caa8c771a7d186499b6e62d413c2fd6cfed709689f28::coin::COIN>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xd399b358bd0e835000f6caa8c771a7d186499b6e62d413c2fd6cfed709689f28::coin::COIN>",
    "0x2::coin::Coin<0x5029d5a94429a73b8036cd67192d9c5e09bbc2c0fee942d50075a9edba66744f::coin::COIN>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x5029d5a94429a73b8036cd67192d9c5e09bbc2c0fee942d50075a9edba66744f::coin::COIN>",
    "0x2::coin::Coin<0x4eac6573f65e7db5aea5a23e1335993a57e088dcd4aff7934059d9a6311d8655::coin::COIN>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x4eac6573f65e7db5aea5a23e1335993a57e088dcd4aff7934059d9a6311d8655::coin::COIN>",
    "0x2::coin::Coin<0xaf8cd5edc19c4512f4259f0bee101a40d41ebed738ade5874359610ef8eeced5::coin::COIN>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xaf8cd5edc19c4512f4259f0bee101a40d41ebed738ade5874359610ef8eeced5::coin::COIN>",
    "0x2::coin::Coin<0xdbe380b13a6d0f5cdedd58de8f04625263f113b3f9db32b3e1983f49e2841676::coin::COIN>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xdbe380b13a6d0f5cdedd58de8f04625263f113b3f9db32b3e1983f49e2841676::coin::COIN>",
    "0x2::coin::Coin<0x6aa03a9dc71d89ee86827ecfe58a840f34c7b6e5ecb5f2ee00495084e18b0b33::trollface::TROLLFACE>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x6aa03a9dc71d89ee86827ecfe58a840f34c7b6e5ecb5f2ee00495084e18b0b33::trollface::TROLLFACE>",
    "0x2::coin::Coin<0xe2872bf9ede9074a333308a7b91026912aa68b83672b7d3b3f5f8dd96c44a0a2::suidoge::SUIDOGE>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xe2872bf9ede9074a333308a7b91026912aa68b83672b7d3b3f5f8dd96c44a0a2::suidoge::SUIDOGE>",
    "0x2::coin::Coin<0xb401bf55ff040aa270f3ebe48eb8e922f6ec8039de12fe87bbd8353d138e0c4f::SAPE::SAPE>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xb401bf55ff040aa270f3ebe48eb8e922f6ec8039de12fe87bbd8353d138e0c4f::SAPE::SAPE>",
    "0x2::coin::Coin<0x737ead67630854fc0775f6ff901e8a2ac9f8a6304adbce228b5db478b5f3fa6::suishib::SUISHIB>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x737ead67630854fc0775f6ff901e8a2ac9f8a6304adbce228b5db478b5f3fa6::suishib::SUISHIB>",
    "0x2::coin::Coin<0x9a399e218c15b0d1e546ebe95521ee327a30ca9b129b378cfa422aefec53f758::brcsui::BRCSUI>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x9a399e218c15b0d1e546ebe95521ee327a30ca9b129b378cfa422aefec53f758::brcsui::BRCSUI>",
    "0x2::coin::Coin<0x1e8b532cca6569cab9f9b9ebc73f8c13885012ade714729aa3b450e0339ac766::coin::COIN>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x1e8b532cca6569cab9f9b9ebc73f8c13885012ade714729aa3b450e0339ac766::coin::COIN>",
    "0x2::coin::Coin<0x5cc7b6ed0ce0d43d08667793f6efe7a34d678a780755dc37ea8bfa8805f63327::coin::COIN>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x5cc7b6ed0ce0d43d08667793f6efe7a34d678a780755dc37ea8bfa8805f63327::coin::COIN>",
    "0x2::coin::Coin<0x909cba62ce96d54de25bec9502de5ca7b4f28901747bbf96b76c2e63ec5f1cba::coin::COIN>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x909cba62ce96d54de25bec9502de5ca7b4f28901747bbf96b76c2e63ec5f1cba::coin::COIN>",
    "0x2::coin::Coin<0x5752303296c20e98336c11e527c8100bf8c8f4757d6ba8d5e7dda11b0eb34afc::XGOAT::XGOAT>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x5752303296c20e98336c11e527c8100bf8c8f4757d6ba8d5e7dda11b0eb34afc::XGOAT::XGOAT>",
    "0x2::coin::Coin<0xebbf537bc3686be32fe22b498b42715641bbb209267be72236a352e0444cc5df::sui_pepe::SUI_PEPE>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xebbf537bc3686be32fe22b498b42715641bbb209267be72236a352e0444cc5df::sui_pepe::SUI_PEPE>",
    "0x2::coin::Coin<0x6081300950a4f1e2081580e919c210436a1bed49080502834950d31ee55a2396::coin::COIN>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x6081300950a4f1e2081580e919c210436a1bed49080502834950d31ee55a2396::coin::COIN>",
    "0x2::coin::Coin<0x1a4790c0a675dac9d3b9f1b01a3514130fe26c768485e93a388df493c24ac170::suijak::SUIJAK>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x1a4790c0a675dac9d3b9f1b01a3514130fe26c768485e93a388df493c24ac170::suijak::SUIJAK>",
    "0x2::coin::Coin<0xc060006111016b8a020ad5b33834984a437aaa7d3c74c18e09a95d48aceab08c::coin::COIN>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xc060006111016b8a020ad5b33834984a437aaa7d3c74c18e09a95d48aceab08c::coin::COIN>",
    "0x2::coin::Coin<0x57788e291373f223be4e09e7d8bf0e05db9a11c3cc2df6b32abdab30329f2918::SUIFROG::SUIFROG>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x57788e291373f223be4e09e7d8bf0e05db9a11c3cc2df6b32abdab30329f2918::SUIFROG::SUIFROG>",
    "0x2::coin::Coin<0xad6a66848f713d04b258b121604f57e8a4d3b4a9707697cb79391c0bf6bba888::ORDI::ORDI>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xad6a66848f713d04b258b121604f57e8a4d3b4a9707697cb79391c0bf6bba888::ORDI::ORDI>",
    "0x2::coin::Coin<0x5d4b302506645c37ff133b98c4b50a5ae14841659738d6d733d59d0d217a93bf::coin::COIN>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x5d4b302506645c37ff133b98c4b50a5ae14841659738d6d733d59d0d217a93bf::coin::COIN>",
    "0x2::coin::Coin<0xb7844e289a8410e50fb3ca48d69eb9cf29e27d223ef90353fe1bd8e27ff8f3f8::coin::COIN>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xb7844e289a8410e50fb3ca48d69eb9cf29e27d223ef90353fe1bd8e27ff8f3f8::coin::COIN>",
    "0x2::coin::Coin<0xf73024bd5f0450745f555ddd40964f2d6798afc47b5dd46c6c53e50b9186d90e::duckies::DUCKIES>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xf73024bd5f0450745f555ddd40964f2d6798afc47b5dd46c6c53e50b9186d90e::duckies::DUCKIES>",
    "0x2::coin::Coin<0xbcbbd5c23edf35fc279e21ebc129a1187dbfa5b086c63a8e7ff202865888b27b::coin::COIN>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xbcbbd5c23edf35fc279e21ebc129a1187dbfa5b086c63a8e7ff202865888b27b::coin::COIN>",
    "0x2::coin::Coin<0x603b488c87e0d1df64560a61418c87238d440a29ee39bbd757b0c92d38a35c7c::coin::COIN>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x603b488c87e0d1df64560a61418c87238d440a29ee39bbd757b0c92d38a35c7c::coin::COIN>",
    "0x2::coin::Coin<0x46741a35920c2c34117011bb0e8e6341d8c4427220ad8949475d4f41218558ce::suiboba::SUIBOBA>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x46741a35920c2c34117011bb0e8e6341d8c4427220ad8949475d4f41218558ce::suiboba::SUIBOBA>"
  },
  "0x2::coin::Coin<0x361fcb86803eea2403007250638f3c8427249168ac77fee74b7129bdc05b2586::aifrens::AIFRENS>": {
    "0x2::coin::Coin<0x2::sui::SUI>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x361fcb86803eea2403007250638f3c8427249168ac77fee74b7129bdc05b2586::aifrens::AIFRENS>"
  },
  "0x2::coin::Coin<0xb848cce11ef3a8f62eccea6eb5b35a12c4c2b1ee1af7755d02d7bd6218e8226f::coin::COIN>": {
    "0x2::coin::Coin<0x2::sui::SUI>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xb848cce11ef3a8f62eccea6eb5b35a12c4c2b1ee1af7755d02d7bd6218e8226f::coin::COIN>"
  },
  "0x2::coin::Coin<0xa198f3be41cda8c07b3bf3fee02263526e535d682499806979a111e88a5a8d0f::coin::COIN>": {
    "0x2::coin::Coin<0x2::sui::SUI>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xa198f3be41cda8c07b3bf3fee02263526e535d682499806979a111e88a5a8d0f::coin::COIN>"
  },
  "0x2::coin::Coin<0x5d4b302506645c37ff133b98c4b50a5ae14841659738d6d733d59d0d217a93bf::coin::COIN>": {
    "0x2::coin::Coin<0xc060006111016b8a020ad5b33834984a437aaa7d3c74c18e09a95d48aceab08c::coin::COIN>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Stable, 0x5d4b302506645c37ff133b98c4b50a5ae14841659738d6d733d59d0d217a93bf::coin::COIN, 0xc060006111016b8a020ad5b33834984a437aaa7d3c74c18e09a95d48aceab08c::coin::COIN>",
    "0x2::coin::Coin<0x909cba62ce96d54de25bec9502de5ca7b4f28901747bbf96b76c2e63ec5f1cba::coin::COIN>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Stable, 0x5d4b302506645c37ff133b98c4b50a5ae14841659738d6d733d59d0d217a93bf::coin::COIN, 0x909cba62ce96d54de25bec9502de5ca7b4f28901747bbf96b76c2e63ec5f1cba::coin::COIN>",
    "0x2::coin::Coin<0x2::sui::SUI>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x5d4b302506645c37ff133b98c4b50a5ae14841659738d6d733d59d0d217a93bf::coin::COIN>"
  },
  "0x2::coin::Coin<0xc060006111016b8a020ad5b33834984a437aaa7d3c74c18e09a95d48aceab08c::coin::COIN>": {
    "0x2::coin::Coin<0x5d4b302506645c37ff133b98c4b50a5ae14841659738d6d733d59d0d217a93bf::coin::COIN>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Stable, 0x5d4b302506645c37ff133b98c4b50a5ae14841659738d6d733d59d0d217a93bf::coin::COIN, 0xc060006111016b8a020ad5b33834984a437aaa7d3c74c18e09a95d48aceab08c::coin::COIN>",
    "0x2::coin::Coin<0x2::sui::SUI>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xc060006111016b8a020ad5b33834984a437aaa7d3c74c18e09a95d48aceab08c::coin::COIN>"
  },
  "0x2::coin::Coin<0xbde18964049a1226f6e30dd2058ac03205d3d7c6f7a3062760a70e20a4b49d1c::wojak_coin::WOJAK_COIN>": {
    "0x2::coin::Coin<0x2::sui::SUI>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xbde18964049a1226f6e30dd2058ac03205d3d7c6f7a3062760a70e20a4b49d1c::wojak_coin::WOJAK_COIN>"
  },
  "0x2::coin::Coin<0xd735282698c3093adf91c59ba5fa3294112d7dd713beb4f7753eac4637bd47a1::bark::BARK>": {
    "0x2::coin::Coin<0x2::sui::SUI>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xd735282698c3093adf91c59ba5fa3294112d7dd713beb4f7753eac4637bd47a1::bark::BARK>"
  },
  "0x2::coin::Coin<0xd399b358bd0e835000f6caa8c771a7d186499b6e62d413c2fd6cfed709689f28::coin::COIN>": {
    "0x2::coin::Coin<0x2::sui::SUI>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xd399b358bd0e835000f6caa8c771a7d186499b6e62d413c2fd6cfed709689f28::coin::COIN>"
  },
  "0x2::coin::Coin<0x5029d5a94429a73b8036cd67192d9c5e09bbc2c0fee942d50075a9edba66744f::coin::COIN>": {
    "0x2::coin::Coin<0x2::sui::SUI>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x5029d5a94429a73b8036cd67192d9c5e09bbc2c0fee942d50075a9edba66744f::coin::COIN>"
  },
  "0x2::coin::Coin<0x4eac6573f65e7db5aea5a23e1335993a57e088dcd4aff7934059d9a6311d8655::coin::COIN>": {
    "0x2::coin::Coin<0x2::sui::SUI>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x4eac6573f65e7db5aea5a23e1335993a57e088dcd4aff7934059d9a6311d8655::coin::COIN>"
  },
  "0x2::coin::Coin<0xaf8cd5edc19c4512f4259f0bee101a40d41ebed738ade5874359610ef8eeced5::coin::COIN>": {
    "0x2::coin::Coin<0x2::sui::SUI>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xaf8cd5edc19c4512f4259f0bee101a40d41ebed738ade5874359610ef8eeced5::coin::COIN>"
  },
  "0x2::coin::Coin<0xdbe380b13a6d0f5cdedd58de8f04625263f113b3f9db32b3e1983f49e2841676::coin::COIN>": {
    "0x2::coin::Coin<0x2::sui::SUI>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xdbe380b13a6d0f5cdedd58de8f04625263f113b3f9db32b3e1983f49e2841676::coin::COIN>"
  },
  "0x2::coin::Coin<0x6aa03a9dc71d89ee86827ecfe58a840f34c7b6e5ecb5f2ee00495084e18b0b33::trollface::TROLLFACE>": {
    "0x2::coin::Coin<0x2::sui::SUI>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x6aa03a9dc71d89ee86827ecfe58a840f34c7b6e5ecb5f2ee00495084e18b0b33::trollface::TROLLFACE>"
  },
  "0x2::coin::Coin<0xe2872bf9ede9074a333308a7b91026912aa68b83672b7d3b3f5f8dd96c44a0a2::suidoge::SUIDOGE>": {
    "0x2::coin::Coin<0x2::sui::SUI>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xe2872bf9ede9074a333308a7b91026912aa68b83672b7d3b3f5f8dd96c44a0a2::suidoge::SUIDOGE>"
  },
  "0x2::coin::Coin<0x603b488c87e0d1df64560a61418c87238d440a29ee39bbd757b0c92d38a35c7c::coin::COIN>": {
    "0x2::coin::Coin<0x909cba62ce96d54de25bec9502de5ca7b4f28901747bbf96b76c2e63ec5f1cba::coin::COIN>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Stable, 0x603b488c87e0d1df64560a61418c87238d440a29ee39bbd757b0c92d38a35c7c::coin::COIN, 0x909cba62ce96d54de25bec9502de5ca7b4f28901747bbf96b76c2e63ec5f1cba::coin::COIN>",
    "0x2::coin::Coin<0x2::sui::SUI>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x603b488c87e0d1df64560a61418c87238d440a29ee39bbd757b0c92d38a35c7c::coin::COIN>"
  },
  "0x2::coin::Coin<0x909cba62ce96d54de25bec9502de5ca7b4f28901747bbf96b76c2e63ec5f1cba::coin::COIN>": {
    "0x2::coin::Coin<0x603b488c87e0d1df64560a61418c87238d440a29ee39bbd757b0c92d38a35c7c::coin::COIN>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Stable, 0x603b488c87e0d1df64560a61418c87238d440a29ee39bbd757b0c92d38a35c7c::coin::COIN, 0x909cba62ce96d54de25bec9502de5ca7b4f28901747bbf96b76c2e63ec5f1cba::coin::COIN>",
    "0x2::coin::Coin<0x2::sui::SUI>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x909cba62ce96d54de25bec9502de5ca7b4f28901747bbf96b76c2e63ec5f1cba::coin::COIN>",
    "0x2::coin::Coin<0x5d4b302506645c37ff133b98c4b50a5ae14841659738d6d733d59d0d217a93bf::coin::COIN>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Stable, 0x5d4b302506645c37ff133b98c4b50a5ae14841659738d6d733d59d0d217a93bf::coin::COIN, 0x909cba62ce96d54de25bec9502de5ca7b4f28901747bbf96b76c2e63ec5f1cba::coin::COIN>"
  },
  "0x2::coin::Coin<0xb401bf55ff040aa270f3ebe48eb8e922f6ec8039de12fe87bbd8353d138e0c4f::SAPE::SAPE>": {
    "0x2::coin::Coin<0x2::sui::SUI>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xb401bf55ff040aa270f3ebe48eb8e922f6ec8039de12fe87bbd8353d138e0c4f::SAPE::SAPE>"
  },
  "0x2::coin::Coin<0x737ead67630854fc0775f6ff901e8a2ac9f8a6304adbce228b5db478b5f3fa6::suishib::SUISHIB>": {
    "0x2::coin::Coin<0x2::sui::SUI>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x737ead67630854fc0775f6ff901e8a2ac9f8a6304adbce228b5db478b5f3fa6::suishib::SUISHIB>"
  },
  "0x2::coin::Coin<0x9a399e218c15b0d1e546ebe95521ee327a30ca9b129b378cfa422aefec53f758::brcsui::BRCSUI>": {
    "0x2::coin::Coin<0x2::sui::SUI>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x9a399e218c15b0d1e546ebe95521ee327a30ca9b129b378cfa422aefec53f758::brcsui::BRCSUI>"
  },
  "0x2::coin::Coin<0x1e8b532cca6569cab9f9b9ebc73f8c13885012ade714729aa3b450e0339ac766::coin::COIN>": {
    "0x2::coin::Coin<0x2::sui::SUI>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x1e8b532cca6569cab9f9b9ebc73f8c13885012ade714729aa3b450e0339ac766::coin::COIN>"
  },
  "0x2::coin::Coin<0x5cc7b6ed0ce0d43d08667793f6efe7a34d678a780755dc37ea8bfa8805f63327::coin::COIN>": {
    "0x2::coin::Coin<0x2::sui::SUI>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x5cc7b6ed0ce0d43d08667793f6efe7a34d678a780755dc37ea8bfa8805f63327::coin::COIN>"
  },
  "0x2::coin::Coin<0x5752303296c20e98336c11e527c8100bf8c8f4757d6ba8d5e7dda11b0eb34afc::XGOAT::XGOAT>": {
    "0x2::coin::Coin<0x2::sui::SUI>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x5752303296c20e98336c11e527c8100bf8c8f4757d6ba8d5e7dda11b0eb34afc::XGOAT::XGOAT>"
  },
  "0x2::coin::Coin<0xebbf537bc3686be32fe22b498b42715641bbb209267be72236a352e0444cc5df::sui_pepe::SUI_PEPE>": {
    "0x2::coin::Coin<0x2::sui::SUI>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xebbf537bc3686be32fe22b498b42715641bbb209267be72236a352e0444cc5df::sui_pepe::SUI_PEPE>"
  },
  "0x2::coin::Coin<0x6081300950a4f1e2081580e919c210436a1bed49080502834950d31ee55a2396::coin::COIN>": {
    "0x2::coin::Coin<0x2::sui::SUI>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x6081300950a4f1e2081580e919c210436a1bed49080502834950d31ee55a2396::coin::COIN>"
  },
  "0x2::coin::Coin<0x1a4790c0a675dac9d3b9f1b01a3514130fe26c768485e93a388df493c24ac170::suijak::SUIJAK>": {
    "0x2::coin::Coin<0x2::sui::SUI>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x1a4790c0a675dac9d3b9f1b01a3514130fe26c768485e93a388df493c24ac170::suijak::SUIJAK>"
  },
  "0x2::coin::Coin<0x57788e291373f223be4e09e7d8bf0e05db9a11c3cc2df6b32abdab30329f2918::SUIFROG::SUIFROG>": {
    "0x2::coin::Coin<0x2::sui::SUI>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x57788e291373f223be4e09e7d8bf0e05db9a11c3cc2df6b32abdab30329f2918::SUIFROG::SUIFROG>"
  },
  "0x2::coin::Coin<0xad6a66848f713d04b258b121604f57e8a4d3b4a9707697cb79391c0bf6bba888::ORDI::ORDI>": {
    "0x2::coin::Coin<0x2::sui::SUI>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xad6a66848f713d04b258b121604f57e8a4d3b4a9707697cb79391c0bf6bba888::ORDI::ORDI>"
  },
  "0x2::coin::Coin<0xb7844e289a8410e50fb3ca48d69eb9cf29e27d223ef90353fe1bd8e27ff8f3f8::coin::COIN>": {
    "0x2::coin::Coin<0x2::sui::SUI>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xb7844e289a8410e50fb3ca48d69eb9cf29e27d223ef90353fe1bd8e27ff8f3f8::coin::COIN>"
  },
  "0x2::coin::Coin<0xf73024bd5f0450745f555ddd40964f2d6798afc47b5dd46c6c53e50b9186d90e::duckies::DUCKIES>": {
    "0x2::coin::Coin<0x2::sui::SUI>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xf73024bd5f0450745f555ddd40964f2d6798afc47b5dd46c6c53e50b9186d90e::duckies::DUCKIES>"
  },
  "0x2::coin::Coin<0xbcbbd5c23edf35fc279e21ebc129a1187dbfa5b086c63a8e7ff202865888b27b::coin::COIN>": {
    "0x2::coin::Coin<0x2::sui::SUI>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0xbcbbd5c23edf35fc279e21ebc129a1187dbfa5b086c63a8e7ff202865888b27b::coin::COIN>"
  },
  "0x2::coin::Coin<0x46741a35920c2c34117011bb0e8e6341d8c4427220ad8949475d4f41218558ce::suiboba::SUIBOBA>": {
    "0x2::coin::Coin<0x2::sui::SUI>": "0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::core::Pool<0x5c45d10c26c5fb53bfaff819666da6bc7053d2190dfa29fec311cc666ff1f4b0::curve::Volatile, 0x2::sui::SUI, 0x46741a35920c2c34117011bb0e8e6341d8c4427220ad8949475d4f41218558ce::suiboba::SUIBOBA>"
  }
};
var POOLS = {
  ["sui:testnet" /* TESTNET */]: DEV_NET_POOLS,
  ["sui:devnet" /* DEVNET */]: TEST_NET_POOLS,
  ["sui:mainnet" /* MAINNET */]: MAIN_NET_POOLS
};

// src/sdk/index.ts
var import_bcs = require("@mysten/bcs");
var import_sui2 = require("@mysten/sui.js");
var import_sui3 = require("@mysten/sui.js");
var import_ramda2 = require("ramda");
var import_tiny_invariant = __toESM(require("tiny-invariant"));

// src/utils.ts
var import_ramda = require("ramda");
var getReturnValuesFromInspectResults = (x) => {
  const results = (0, import_ramda.propOr)([], "results", x);
  if (!results?.length)
    return null;
  const firstElem = (0, import_ramda.head)(results);
  if (!firstElem)
    return null;
  const returnValues = firstElem?.returnValues;
  return returnValues ? returnValues : null;
};
var getCoinsFromPoolType = (poolType) => {
  const type = poolType.split("Pool");
  const poolArgs = type[1];
  const tokens = poolArgs.split(",");
  return {
    coinXType: tokens[1].trim(),
    coinYType: tokens[2].split(">")[0].trim()
  };
};
var addCoinTypeToTokenType = (x) => `0x2::coin::Coin<${x}>`;
var findAllMarkets = ({
  markets,
  coinInType,
  coinOutType,
  baseTokens
}) => {
  if ((0, import_ramda.isEmpty)(markets))
    return [];
  const poolType = (0, import_ramda.pathOr)(
    null,
    [addCoinTypeToTokenType(coinInType), addCoinTypeToTokenType(coinOutType)],
    markets
  );
  const acc = [];
  if (poolType) {
    const { coinXType, coinYType } = getCoinsFromPoolType(poolType);
    acc.push({
      baseTokens: [],
      coinInType,
      coinOutType,
      functionName: coinInType === coinXType ? "swap_x" /* SwapX */ : "swap_y" /* SwapY */,
      typeArgs: [coinXType, coinYType]
    });
  }
  return baseTokens.reduce((acc2, element) => {
    const firstPool = (0, import_ramda.pathOr)(
      null,
      [addCoinTypeToTokenType(coinInType), addCoinTypeToTokenType(element)],
      markets
    );
    const secondPool = (0, import_ramda.pathOr)(
      null,
      [addCoinTypeToTokenType(coinOutType), addCoinTypeToTokenType(element)],
      markets
    );
    if (firstPool && secondPool)
      return acc2.concat([
        {
          baseTokens: [element],
          coinOutType,
          coinInType,
          functionName: "one_hop_swap" /* OneHopSwap */,
          typeArgs: [coinInType, element, coinOutType]
        }
      ]);
    return acc2;
  }, acc);
};
var findMarket = ({
  data,
  network,
  coinInType,
  coinOutType
}) => {
  if ((0, import_ramda.isEmpty)(data))
    return [];
  const poolType = (0, import_ramda.pathOr)(
    null,
    [addCoinTypeToTokenType(coinInType), addCoinTypeToTokenType(coinOutType)],
    data
  );
  if (poolType) {
    const { coinXType, coinYType } = getCoinsFromPoolType(poolType);
    return [
      {
        baseTokens: [],
        coinInType,
        coinOutType,
        functionName: coinInType === coinXType ? "swap_x" /* SwapX */ : "swap_y" /* SwapY */,
        typeArgs: [coinXType, coinYType]
      }
    ];
  }
  return DEX_BASE_TOKEN_ARRAY[network].reduce(
    (acc, element) => {
      const firstPool = (0, import_ramda.pathOr)(
        null,
        [addCoinTypeToTokenType(coinInType), addCoinTypeToTokenType(element)],
        data
      );
      const secondPool = (0, import_ramda.pathOr)(
        null,
        [addCoinTypeToTokenType(coinOutType), addCoinTypeToTokenType(element)],
        data
      );
      if (firstPool && secondPool)
        return [
          ...acc,
          {
            baseTokens: [element],
            coinOutType,
            coinInType,
            functionName: "one_hop_swap" /* OneHopSwap */,
            typeArgs: [coinInType, element, coinOutType]
          }
        ];
      return acc;
    },
    []
  );
};
var parseRawDEXMarkets = (data) => {
  if (!data)
    return {};
  return data.reduce((acc, elem) => {
    const { coinXType, coinYType } = getCoinsFromPoolType(elem.objectType);
    const parsedTokenIn = addCoinTypeToTokenType(coinXType);
    const parsedTokenOut = addCoinTypeToTokenType(coinYType);
    if (!acc[parsedTokenIn])
      acc[parsedTokenIn] = {};
    if (!acc[parsedTokenOut])
      acc[parsedTokenOut] = {};
    return {
      ...acc,
      [parsedTokenIn]: {
        ...acc[parsedTokenIn],
        [parsedTokenOut]: elem.objectType
      },
      [parsedTokenOut]: {
        ...acc[parsedTokenOut],
        [parsedTokenIn]: elem.objectType
      }
    };
  }, {});
};
var getAllDynamicFieldsInternal = async ({
  data,
  cursor,
  parentId,
  provider
}) => {
  const newData = await provider.getDynamicFields({
    parentId,
    cursor
  });
  const nextData = data.concat(newData.data);
  if (!newData.hasNextPage)
    return nextData;
  return getAllDynamicFieldsInternal({
    data: nextData,
    cursor: newData.nextCursor,
    parentId,
    provider
  });
};
var getAllDynamicFields = async (provider, parentId) => {
  const data = await provider.getDynamicFields({
    parentId
  });
  return data.hasNextPage ? getAllDynamicFieldsInternal({
    data: data.data,
    cursor: data.nextCursor,
    parentId,
    provider
  }) : data.data;
};
var processPool = (data) => {
  if (!data)
    return DEFAULT_POOL;
  const poolType = (0, import_ramda.pathOr)("", ["data", "type"], data);
  const stable = poolType.includes("Stable");
  if (!poolType)
    return DEFAULT_POOL;
  const { coinXType: token0Type, coinYType: token1Type } = getCoinsFromPoolType(poolType);
  return {
    token0Balance: (0, import_ramda.pathOr)("", ["data", "content", "fields", "balance_x"], data),
    token1Balance: (0, import_ramda.pathOr)("", ["data", "content", "fields", "balance_y"], data),
    lpCoinSupply: (0, import_ramda.pathOr)(
      "",
      ["data", "content", "fields", "lp_coin_supply", "fields", "value"],
      data
    ),
    lpCoin: (0, import_ramda.pathOr)(
      "",
      ["data", "content", "fields", "lp_coin_supply", "type"],
      data
    ),
    poolType,
    token0Type,
    token1Type,
    stable
  };
};

// src/sdk/index.ts
var _POOLS;
var SDK = class {
  constructor(provider, network) {
    this.provider = provider;
    this.network = network;
    __privateAdd(this, _POOLS, void 0);
    (0, import_tiny_invariant.default)(Object.values(Network).includes(network), "Invalid network");
    __privateSet(this, _POOLS, POOLS[network]);
  }
  /**
   * @description It returns the pool object id from a set of two ordered coin types If it returns null, it means the pool is not deployed.
   * @param tokenAType The coin A in Pool<A, B>
   * @param tokenBType The coin B in Pool<A,B>
   * @param account The caller account, it will default to @0x0 if not passed
   */
  async findPoolId({
    tokenAType,
    tokenBType,
    stable,
    account = ZERO_ADDRESS
  }) {
    (0, import_tiny_invariant.default)((0, import_sui2.isValidSuiAddress)(account), "Invalid Sui Address");
    const txb = new import_sui2.TransactionBlock();
    const objects = OBJECT_RECORD[this.network];
    txb.moveCall({
      target: `${objects.DEX_PACKAGE_ID}::interface::get_pool_id`,
      typeArguments: [
        stable ? STABLE[this.network] : VOLATILE[this.network],
        tokenAType,
        tokenBType
      ],
      arguments: [txb.object(objects.DEX_CORE_STORAGE)]
    });
    const response = await this.provider.devInspectTransactionBlock({
      transactionBlock: txb,
      sender: account || ZERO_ADDRESS
    });
    if (response.effects.status.status === "failure")
      return null;
    const data = getReturnValuesFromInspectResults(response);
    if (!data || !data.length)
      return null;
    return `0x${(0, import_bcs.toHEX)(Uint8Array.from(data[0][0]))}`;
  }
  /**
   * @description It returns a {TransactionBlock} to be called
   * @param txb The {TransactionBlock} that will be returned
   * @param coinA An ObjectTransactionArgument of Coin0 on Pool<0,1>
   * @param coinB An ObjectTransactionArgument of Coin1 on Pool<0,1>
   * @param coinAAmount The desired value to add for coin0
   * @param coinBAmount The desired value to add for coin1
   * @param coinAType The type of Coin0
   * @param coinBType The type of Coin1
   * @return txb {TransactionBlock}
   */
  createVolatilePool({
    txb,
    coinAList,
    coinBList,
    coinAAmount,
    coinBAmount,
    coinAType,
    coinBType
  }) {
    (0, import_tiny_invariant.default)(+coinAAmount > 0, "Cannot add coinAAmount");
    (0, import_tiny_invariant.default)(+coinBAmount > 0, "Cannot add coinBAmount");
    const objects = OBJECT_RECORD[this.network];
    txb.moveCall({
      target: `${objects.DEX_PACKAGE_ID}::interface::create_v_pool`,
      typeArguments: [coinAType, coinBType],
      arguments: [
        txb.object(objects.DEX_CORE_STORAGE),
        txb.object(import_sui3.SUI_CLOCK_OBJECT_ID),
        txb.makeMoveVec({
          objects: coinAList
        }),
        txb.makeMoveVec({
          objects: coinBList
        }),
        txb.pure(coinAAmount),
        txb.pure(coinBAmount)
      ]
    });
    return txb;
  }
  /**
   * @description It returns a {TransactionBlock} to be called
   * @param txb The {TransactionBlock} that will be returned
   * @param coinA An ObjectTransactionArgument of Coin0 on Pool<0,1>
   * @param coinB An ObjectTransactionArgument of Coin1 on Pool<0,1>
   * @param coinAAmount The desired value to add for coin0
   * @param coinBAmount The desired value to add for coin1
   * @param coinAType The type of Coin0
   * @param coinBType The type of Coin1
   * @return txb {TransactionBlock}
   */
  async createStablePool({
    txb,
    coinAList,
    coinBList,
    coinAAmount,
    coinBAmount,
    coinAType,
    coinBType
  }) {
    (0, import_tiny_invariant.default)(+coinAAmount > 0, "Cannot add coinAAmount");
    (0, import_tiny_invariant.default)(+coinBAmount > 0, "Cannot add coinBAmount");
    const objects = OBJECT_RECORD[this.network];
    const coinAMetadata = await this.provider.getCoinMetadata({
      coinType: coinAType
    });
    const coinBMetadata = await this.provider.getCoinMetadata({
      coinType: coinAType
    });
    (0, import_tiny_invariant.default)(!!coinAMetadata, "coinAType does not have a metadata");
    (0, import_tiny_invariant.default)(!!coinBMetadata, "coinBType does not have a metadata");
    txb.moveCall({
      target: `${objects.DEX_PACKAGE_ID}::interface::create_s_pool`,
      typeArguments: [coinAType, coinBType],
      arguments: [
        txb.object(objects.DEX_CORE_STORAGE),
        txb.object(import_sui3.SUI_CLOCK_OBJECT_ID),
        txb.makeMoveVec({
          objects: coinAList
        }),
        txb.makeMoveVec({
          objects: coinBList
        }),
        txb.pure(coinAAmount),
        txb.pure(coinBAmount),
        txb.object((0, import_ramda2.propOr)("", "id", coinAMetadata)),
        txb.object((0, import_ramda2.propOr)("", "id", coinBMetadata))
      ]
    });
    return txb;
  }
  /**
   * @param txb The {TransactionBlock} class to chain
   * @param coinInList An Array of objects being sold Coin
   * @param coinInAmount The amount of the coin being sold
   * @param coinInType The type of the coin being sold
   * @param coinOutType The type of the coin being bought
   * @param coinOutMinimumAmount The minimum amount to receive in coinOutType to control slippage
   * @param useCache It defaults to false. If it is false, we will first fetch the latest pools data. If not, we will use a cache.
   * @param deadline 30 represents 30 minutes. The TX will be cancelled if not processed within the deadline
   * @param dexMarkets An object of Pools
   */
  async swap({
    txb,
    coinInList,
    coinInAmount,
    coinInType,
    coinOutType,
    coinOutMinimumAmount,
    useCache = false,
    dexMarkets,
    deadline = "30"
  }) {
    (0, import_tiny_invariant.default)(+coinInAmount > 0, "Cannot add coinAAmount");
    const quoteSwapData = await this.quoteSwap({
      coinInAmount,
      coinInType,
      coinOutType,
      markets: dexMarkets ? dexMarkets : useCache ? __privateGet(this, _POOLS) : await this.getLatestDEXMarkets()
    });
    (0, import_tiny_invariant.default)(!!quoteSwapData, "No Market for those coins");
    const objects = OBJECT_RECORD[this.network];
    const nowTime = (/* @__PURE__ */ new Date()).getTime();
    const swapObject = quoteSwapData.swapObject;
    if (!swapObject.baseTokens.length) {
      txb.moveCall({
        target: `${objects.DEX_PACKAGE_ID}::interface::${swapObject.functionName}`,
        typeArguments: swapObject.typeArgs,
        arguments: [
          txb.object(objects.DEX_CORE_STORAGE),
          txb.object(import_sui3.SUI_CLOCK_OBJECT_ID),
          txb.makeMoveVec({
            objects: coinInList
          }),
          txb.pure(coinInAmount),
          txb.pure(coinOutMinimumAmount),
          txb.pure((nowTime + +deadline * 60 * 1e3).toString())
        ]
      });
      return txb;
    }
    txb.moveCall({
      target: `${objects.DEX_PACKAGE_ID}::interface::${swapObject.functionName}`,
      typeArguments: swapObject.typeArgs,
      arguments: [
        txb.object(objects.DEX_CORE_STORAGE),
        txb.object(import_sui3.SUI_CLOCK_OBJECT_ID),
        txb.makeMoveVec({
          objects: coinInList
        }),
        txb.pure(coinInAmount),
        txb.pure(coinOutMinimumAmount),
        txb.pure(nowTime + +deadline * 60 * 1e3)
      ]
    });
    return txb;
  }
  /**
   * @description It returns the amount of the coinOutType from swapping the amount of coin type in
   * @param coinInAmount The amount of the coin being sold
   * @param coinInType The type of the coin being sold
   * @param coinOutType The type of the coin being bought
   * @param baseTokens An array of base coins to use for the one hop swap
   * @param useCache It defaults to false. If it is false, we will first fetch the latest pools data. If not, we will use a cache.
   * @param markets An object of Pools
   */
  async quoteSwap({
    coinInAmount,
    coinInType,
    coinOutType,
    baseTokens,
    useCache = false,
    markets
  }) {
    const objects = OBJECT_RECORD[this.network];
    const allMarkets = findAllMarkets({
      markets: markets ? markets : useCache ? __privateGet(this, _POOLS) : await this.getLatestDEXMarkets(),
      coinInType,
      coinOutType,
      baseTokens: baseTokens ? baseTokens : DEX_BASE_TOKEN_ARRAY[this.network]
    });
    if (!allMarkets.length)
      return null;
    const promises = allMarkets.map(
      ({ functionName, typeArgs, baseTokens: baseTokens2 }) => {
        const txb = new import_sui2.TransactionBlock();
        if (!baseTokens2.length) {
          txb.moveCall({
            target: `${objects.DEX_QUOTE_PACKAGE_ID}::dex_quote::${DEX_FUNCTION_TO_GET_AMOUNT_FUNCTION_MAP[functionName]}`,
            typeArguments: typeArgs,
            arguments: [
              txb.object(objects.DEX_CORE_STORAGE),
              txb.pure(coinInAmount)
            ]
          });
        } else {
          txb.moveCall({
            target: `${objects.DEX_QUOTE_PACKAGE_ID}::dex_quote::${DEX_FUNCTION_TO_GET_AMOUNT_FUNCTION_MAP[functionName]}`,
            typeArguments: typeArgs,
            arguments: [
              txb.object(objects.DEX_CORE_STORAGE),
              txb.pure(coinInAmount)
            ]
          });
        }
        return this.provider.devInspectTransactionBlock({
          transactionBlock: txb,
          sender: ZERO_ADDRESS
        });
      }
    );
    const responseArray = await Promise.all(promises);
    return responseArray.map((response) => {
      const resultArray = getReturnValuesFromInspectResults(response);
      if (!resultArray || !resultArray.length)
        return "0";
      const result = resultArray[0];
      return import_sui3.bcs.de(result[1], Uint8Array.from(result[0]));
    }).reduce(
      (acc, amount, index) => BigInt(amount) > BigInt(acc.amount) ? { swapObject: allMarkets[index], amount } : acc,
      { swapObject: {}, amount: "0" }
    );
  }
  /**
   * @description It allows a user to add liquidity to a pool. Please note that the coins do not need to be ordered
   * @param txb The {TransactionBlock} class to chain
   * @param stable it determines if the liquidity will be added to a stable or volatile pool
   * @param coinAType The type of the first Coin Pair to be added
   * @param coinBType The type of the second Coin Pair to be added
   * @param coinAList An array of objects of coin0Type
   * @param coinBList An array of objects of coin1Type
   * @param coinAAmount The desired amount of coin0Type to add
   * @param coinBAmount The desired amount of coin1Type to add
   * @param lpCoinMinOut The minimum amount of LpCoins to receive from adding liquidity
   */
  addLiquidity({
    txb,
    stable,
    coinAType,
    coinBType,
    coinAList,
    coinBList,
    coinAAmount,
    coinBAmount,
    lpCoinMinOut = "0"
  }) {
    const objects = OBJECT_RECORD[this.network];
    txb.moveCall({
      target: `${objects.DEX_PACKAGE_ID}::interface::add_liquidity`,
      typeArguments: [
        stable ? STABLE[this.network] : VOLATILE[this.network],
        coinAType,
        coinBType
      ],
      arguments: [
        txb.object(objects.DEX_CORE_STORAGE),
        txb.object(import_sui3.SUI_CLOCK_OBJECT_ID),
        txb.makeMoveVec({
          objects: coinAList
        }),
        txb.makeMoveVec({
          objects: coinBList
        }),
        txb.pure(coinAAmount),
        txb.pure(coinBAmount),
        txb.pure(lpCoinMinOut)
      ]
    });
    return txb;
  }
  /**
   * @description It allows the caller to calculate how many LpCoins he will receive. The coins must be ordered.
   * @param coin0Type The A type in Pool<A, B>
   * @param coin1Type The B type in Pool<A, B>
   * @param coin0Amount The amount of Coin<A> being deposited
   * @param coin1Amount The amount of Coin<B> being deposited
   * @param stable It indicates if the caller wishes to deposit in a Volatile or Stable Pool
   */
  async quoteAddLiquidity({
    coin0Type,
    coin1Type,
    coin0Amount,
    coin1Amount,
    stable
  }) {
    (0, import_tiny_invariant.default)(!isNaN(+coin0Amount), "coin0Amount must be a number");
    (0, import_tiny_invariant.default)(!isNaN(+coin1Amount), "coin1Amount must be a number");
    (0, import_tiny_invariant.default)(+coin0Amount > 0, "You cannot add 0 amount of coin0Amount");
    (0, import_tiny_invariant.default)(+coin1Amount > 0, "You cannot add 0 amount of coin1Amount");
    const objects = OBJECT_RECORD[this.network];
    const txb = new import_sui2.TransactionBlock();
    txb.moveCall({
      target: `${objects.DEX_QUOTE_PACKAGE_ID}::dex_quote::quote_add_liquidity`,
      typeArguments: [
        stable ? STABLE[this.network] : VOLATILE[this.network],
        coin0Type,
        coin1Type
      ],
      arguments: [
        txb.object(objects.DEX_CORE_STORAGE),
        txb.pure(coin0Amount),
        txb.pure(coin1Amount)
      ]
    });
    const response = await this.provider.devInspectTransactionBlock({
      transactionBlock: txb,
      sender: ZERO_ADDRESS
    });
    const resultArray = getReturnValuesFromInspectResults(response);
    if (!resultArray || !resultArray.length)
      return null;
    const result = resultArray[0];
    const result1 = resultArray[1];
    const result2 = resultArray[2];
    return [
      import_sui3.bcs.de(result[1], Uint8Array.from(result[0])),
      import_sui3.bcs.de(result1[1], Uint8Array.from(result1[0])),
      import_sui3.bcs.de(result2[1], Uint8Array.from(result2[0]))
    ];
  }
  /**
   * @description It removes liquidity from a pool. Please note that the types do not need to be ordered.
   * @param txb The {TransactionBlock} class to chain
   * @param stable It indicates if the user wishes to remove from a stable or volatile pool
   * @param coin0Type The first coin of the pool
   * @param coinBType The second coin of the pool
   * @param lpCoinList An array of lpCoin objects to be burned to remove the underlying
   * @param lpCoinAmount The desired amount of LP amount to add
   * @param coinAMinAmount The minimum amount of Coin<A> that the user wishes to receive
   * @param coinBMinAmount The minimum amount of Coin<B> that the user wishes to receive
   */
  removeLiquidity({
    txb,
    stable,
    coinAType,
    coinBType,
    lpCoinList,
    lpCoinAmount,
    coinAMinAmount,
    coinBMinAmount
  }) {
    const objects = OBJECT_RECORD[this.network];
    txb.moveCall({
      target: `${objects.DEX_PACKAGE_ID}::interface::remove_liquidity`,
      typeArguments: [
        stable ? STABLE[this.network] : VOLATILE[this.network],
        coinAType,
        coinBType
      ],
      arguments: [
        txb.object(objects.DEX_CORE_STORAGE),
        txb.object(import_sui3.SUI_CLOCK_OBJECT_ID),
        txb.makeMoveVec({
          objects: lpCoinList
        }),
        txb.pure(lpCoinAmount),
        txb.pure(coinAMinAmount),
        txb.pure(coinBMinAmount)
      ]
    });
    return txb;
  }
  /**
   * @description It returns the amount of underlying Coins a user will receive by burning LPCoins. The coins must be ordered.
   * @param coin0Type It represents one of the Coin types from a pool
   * @param coin1Type It represents the other Coin type from a pool
   * @param stable It indicates if it is withdrawing from a stable or volatile pool
   * @param lpCoinAmount The minimum amount of Lp Coin objects of LPCoin<CoinAType, CoinBType> to receive
   */
  async quoteRemoveLiquidity({
    coin0Type,
    coin1Type,
    stable,
    lpCoinAmount
  }) {
    (0, import_tiny_invariant.default)(!isNaN(+lpCoinAmount), "lpCoinAmount must be a number");
    (0, import_tiny_invariant.default)(+lpCoinAmount > 0, "You cannot burn 0 amount of lpCoinAmount");
    const txb = new import_sui2.TransactionBlock();
    const objects = OBJECT_RECORD[this.network];
    txb.moveCall({
      target: `${objects.DEX_QUOTE_PACKAGE_ID}::dex_quote::quote_remove_liquidity`,
      typeArguments: [
        stable ? STABLE[this.network] : VOLATILE[this.network],
        coin0Type,
        coin1Type
      ],
      arguments: [txb.object(objects.DEX_CORE_STORAGE), txb.pure(lpCoinAmount)]
    });
    const response = await this.provider.devInspectTransactionBlock({
      transactionBlock: txb,
      sender: ZERO_ADDRESS
    });
    const resultArray = getReturnValuesFromInspectResults(response);
    if (!resultArray || !resultArray.length)
      return null;
    const result = resultArray[0];
    const result1 = resultArray[1];
    return [
      import_sui3.bcs.de(result[1], Uint8Array.from(result[0])),
      import_sui3.bcs.de(result1[1], Uint8Array.from(result1[0]))
    ];
  }
  /**
   * @description The coin types do not need to be ordered. The SDK does not know every single pool in the DEX
   * @param coinAType
   * @param coinBType
   */
  getSortedPoolCoins(coinAType, coinBType) {
    const poolType = (0, import_ramda2.pathOr)(null, [coinAType, coinBType], __privateGet(this, _POOLS));
    return poolType ? getCoinsFromPoolType(poolType) : null;
  }
  /**
   * @description It returns the cached Markets [coinAType][coinBType] PoolType
   */
  getCachedMarkets() {
    return __privateGet(this, _POOLS);
  }
  /**
   * @description It returns a pool object from a Pool Object Id
   * @param poolObjectId The id of Pool object
   */
  async getPool(poolObjectId) {
    const data = await this.provider.getObject({
      id: poolObjectId,
      options: { showContent: true, showType: true }
    });
    return processPool(data);
  }
  async getLatestDEXMarkets() {
    const objects = OBJECT_RECORD[this.network];
    const poolsDataArray = await getAllDynamicFields(
      this.provider,
      objects.DEX_POOLS
    );
    const markets = parseRawDEXMarkets(poolsDataArray);
    __privateSet(this, _POOLS, markets);
    return markets;
  }
};
_POOLS = new WeakMap();
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  COIN_TYPE,
  DEFAULT_POOL,
  DEX_BASE_TOKEN_ARRAY,
  DEX_FUNCTION_TO_GET_AMOUNT_FUNCTION_MAP,
  DexFunctions,
  MAINNET_BASE_COINS,
  Network,
  OBJECT_RECORD,
  POOLS,
  SDK,
  STABLE,
  VOLATILE,
  ZERO_ADDRESS,
  addCoinTypeToTokenType,
  findAllMarkets,
  findMarket,
  getAllDynamicFields,
  getCoinsFromPoolType,
  getReturnValuesFromInspectResults,
  parseRawDEXMarkets,
  processPool
});
//# sourceMappingURL=index.js.map