import { DevInspectResults, JsonRpcProvider, SuiObjectResponse } from '@mysten/sui.js';
import { DynamicFieldInfo } from '@mysten/sui.js/src/types/dynamic_fields';
import { Pool } from './constants/index.js';
import { DexMarket, FindAllMarkets, FindMarketArgs, SwapPathObject } from './types';
export declare const getReturnValuesFromInspectResults: (x: DevInspectResults) => Array<[number[], string]> | null;
export declare const getCoinsFromPoolType: (poolType: string) => {
    coinXType: string;
    coinYType: string;
};
export declare const addCoinTypeToTokenType: (x: string) => string;
export declare const findAllMarkets: ({ markets, coinInType, coinOutType, baseTokens, }: FindAllMarkets) => ReadonlyArray<SwapPathObject>;
export declare const findMarket: ({ data, network, coinInType, coinOutType, }: FindMarketArgs) => ReadonlyArray<SwapPathObject>;
export declare const parseRawDEXMarkets: (data: DynamicFieldInfo[]) => DexMarket;
export declare const getAllDynamicFields: (provider: JsonRpcProvider, parentId: string) => Promise<{
    type: "DynamicField" | "DynamicObject";
    objectType: string;
    objectId: string;
    version: number;
    digest: string;
    name: {
        type: string;
        value?: any;
    };
    bcsName: string;
}[] | {
    type: "DynamicField" | "DynamicObject";
    objectType: string;
    objectId: string;
    version: number;
    digest: string;
    name: {
        type: string;
        value?: any;
    };
    bcsName: string;
}[]>;
export declare const processPool: (data: undefined | SuiObjectResponse) => Pool;
